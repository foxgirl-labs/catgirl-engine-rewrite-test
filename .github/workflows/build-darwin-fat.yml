name: Build For Darwin Fat (DMG)
run-name: ${{ github.actor }} is building for Darwin Fat (DMG)
on: [push]
jobs:
  Build:
    runs-on: macos-latest
    environment: Darwin
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Toml Files Don't Take Variables, So We Have To Hardcode The File
      - name: Setup Config.toml
        run: sed "s:\$WORKSPACE:${{ github.workspace }}:g" ${{ github.workspace }}/.cargo/config.toml.sample > ${{ github.workspace }}/.cargo/config.toml

      # Install Rust Nightly Toolchains 
      - name: Set Rust To The Nightly Toolchains
        run: $HOME/.cargo/bin/rustup default nightly

      # Setup Rust Build Caching
      - uses: Swatinem/rust-cache@v2
        with:
          prefix-key: "darwin-rust"

      # Add Build Targets (No PowerPC or i686 For Now)
      - name: Add x86_64 Darwin Build Target
        run: $HOME/.cargo/bin/rustup target add x86_64-apple-darwin
      - name: Add aarch64 Darwin Build Target
        run: $HOME/.cargo/bin/rustup target add aarch64-apple-darwin

      # Symlink SDK to WORKSPACE/build/sdk
      - name: Symlink SDK to $WORKSPACE/build/sdk
        run: |
          mkdir -p ${{ github.workspace }}/build
          ln -sf $(xcrun --sdk macosx --show-sdk-path) ${{ github.workspace }}/build/sdk

      # Install Code Size Profiler
      # - name: Install Code Size Profiler
      #   run: $HOME/.cargo/bin/cargo install -j 4 twiggy

      # Compile Program
      - name: Build Program (x86_64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo build -j 6 --release --target=x86_64-apple-darwin --bin catgirl-engine
      - name: Build Program (aarch64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo build -j 6 --release --target=aarch64-apple-darwin --bin catgirl-engine

      # Test Program
      - name: Test Program (x86_64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo test -j 6 --verbose --target=x86_64-apple-darwin --bins --tests --benches --examples
      # - name: Test Program (aarch64)
      #   run: $HOME/.cargo/bin/cargo test -j 6 --verbose --target=aarch64-apple-darwin --bins --tests --benches --examples

      # Combine Binaries Into Fat Binary
      - name: Combine Binaries Into Fat Binary
        run: |
          mkdir -p ${{ github.workspace }}/target/fat-apple-darwin/release
          lipo -create ${{ github.workspace }}/target/x86_64-apple-darwin/release/catgirl-engine ${{ github.workspace }}/target/aarch64-apple-darwin/release/catgirl-engine -output ${{ github.workspace }}/target/fat-apple-darwin/release/catgirl-engine

      # Profile Code Size (Wrongly Says 0 Size)
      # - name: Profile Code Size (x86_64)
      #   run: $HOME/.cargo/bin/twiggy top -n 20 "${{ github.workspace }}/target/x86_64-apple-darwin/release/catgirl-engine"

      # Profile Code Size (Wrongly Says 0 Size)
      # - name: Profile Code Size (x86_64)
      #   run: $HOME/.cargo/bin/twiggy top -n 20 "${{ github.workspace }}/target/aarch64-apple-darwin/release/catgirl-engine"

      # Profile Code Size (Unknown File Magic)
      # - name: Profile Code Size (Fat)
      #   run: $HOME/.cargo/bin/twiggy top -n 20 "${{ github.workspace }}/target/fat-apple-darwin/release/catgirl-engine"

      # Prepare App
      - name: Prepare App
        run: |
          mkdir -p ${{ github.workspace }}/target/osx
          cp -av ${{ github.workspace }}/examples/osx/disk_image ${{ github.workspace }}/target/osx
          ln -s /Applications "${{ github.workspace }}/target/osx/disk_image/ "

      - name: Setup Info.plist
        run: |
          export MACOSX_BUNDLE_EXECUTABLE_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_INFO_STRING=`cat ${{ github.workspace }}/Cargo.toml | grep '^description' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_ICON_FILE=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2`.icns
          export MACOSX_BUNDLE_GUI_IDENTIFIER=`cat ${{ github.workspace }}/android/app/build.gradle | grep "applicationId" | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_BUNDLE_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2 | sed 's/-/ /g' | tr "[A-Z]" "[a-z]" | sed -r 's/\<./\U&/g'`
          export MACOSX_BUNDLE_BUNDLE_VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_COPYRIGHT=`cat ${{ github.workspace }}/Cargo.toml | grep '^license' | head -n1 | cut -d'"' -f2`

          sed "s:\$MACOSX_BUNDLE_EXECUTABLE_NAME:$MACOSX_BUNDLE_EXECUTABLE_NAME:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_INFO_STRING:$MACOSX_BUNDLE_INFO_STRING:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_ICON_FILE:$MACOSX_BUNDLE_ICON_FILE:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_GUI_IDENTIFIER:$MACOSX_BUNDLE_GUI_IDENTIFIER:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_BUNDLE_NAME:$MACOSX_BUNDLE_BUNDLE_NAME:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME:$MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_BUNDLE_VERSION:$MACOSX_BUNDLE_BUNDLE_VERSION:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_COPYRIGHT:$MACOSX_BUNDLE_COPYRIGHT:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist

      # Create DMG For Downloading
      - name: Create DMG For Downloading
        run: |
          export MACOSX_BUNDLE_EXECUTABLE_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2 | sed 's/-/ /g' | tr "[A-Z]" "[a-z]" | sed -r 's/\<./\U&/g'`
          
          mkdir -p ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/MacOS
          mkdir -p ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks
          cp -LR ${{ github.workspace }}/target/fat-apple-darwin/release/$MACOSX_BUNDLE_EXECUTABLE_NAME ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/MacOS/

          ls -liallh ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks/
          rm -rf ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks/*
          
          hdiutil create -volname "$MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME" -srcfolder ${{ github.workspace }}/target/osx/disk_image -ov -format UDZO ${{ github.workspace }}/target/osx/$MACOSX_BUNDLE_EXECUTABLE_NAME.dmg

      # Display Export Directory
      - name: Display Export Directory
        run: |
          find ${{ github.workspace }}/target/osx

      # Prepare Artifact Uploads
      - name: Prepare Artifact Uploads
        run: |
          mkdir -p ${{ github.workspace }}/upload
          mv ${{ github.workspace }}/target/osx/*.dmg ${{ github.workspace }}/upload

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Darwin-Fat-DMG
          path: ${{ github.workspace }}/upload/*

      # List Environment
      - name: List Environment
        run: env
      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: 🍏 This job's status is ${{ job.status }}.
        run: echo "🍏 This job's status is ${{ job.status }}."
  Publish:
    if: ${{ success() && endsWith(github.event.head_commit.message, '--publish') }}
    needs: [Build]
    runs-on: ubuntu-latest
    environment: Darwin
    env:
      BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
      GH_TOKEN: ${{ github.token }}
    permissions:
      # See https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
      # See https://docs.github.com/en/rest/overview/permissions-required-for-fine-grained-personal-access-tokens
      contents: write
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Install Dependencies
      - name: Install APT Packages
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 60
          retry_on: error
          command: |
            sudo apt update
            sudo apt -y install jq  # coreutils gitsome

      # Download Engine
      - name: Download Engine (Release)
        uses: actions/download-artifact@v3
        with:
          name: CatgirlEngine-Darwin-Fat-DMG
          path: ${{ github.workspace }}/artifacts/osx-darwin-fat

      # Create Tag and Github Release
      - name: 👩‍💻 Create Tag and Github Release
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export VERSION_STRING="Catgirl Engine v$VERSION"
          export BODY="Autogenerated Release From Github Actions..."

          export DRAFT="false"
          export PRERELEASE="true"
          export GENERATE_RELEASE_NOTES="true"

          export BRANCH=`git branch --show-current --format="%s" | tr -d '\n'`
          # export COMMIT=`git log -1 --oneline | cut -d' ' -f1 | tr -d '\n'`

          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases \
            -f tag_name="v$VERSION" \
            -f target_commitish="$BRANCH" \
            -f name="$VERSION_STRING" \
            -f body="$BODY" \
            -F draft="$DRAFT" \
            -F prerelease="$PRERELEASE" \
            -F generate_release_notes="$GENERATE_RELEASE_NOTES" || echo "Already Exists"

      # Publish to Github Release
      - name: 👩‍💻 Publish to Github Release
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export ARTIFACT_PATH="${{ github.workspace }}/artifacts/osx-darwin-fat/catgirl-engine.dmg"
          export DISPLAY_LABEL="OSX DMG"

          gh release upload v$VERSION "$ARTIFACT_PATH"#"$DISPLAY_LABEL" -R alexisart/catgirl-engine
          


      # Install Butler (For Uploading to Itch.io)
      - name: Install Butler (Upload to Itch.io)
        run: |
          # https://itch.io/docs/butler/pushing.html#channel-names
          # Setup For Installation
          mkdir -p ${{ github.workspace }}/tools/butler

          # Install Butler
          wget https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default -O ${{ github.workspace }}/butler-linux-amd64.zip
          unzip ${{ github.workspace }}/butler-linux-amd64.zip -d ${{ github.workspace }}/tools/butler

      # Publish to Itch.io
      - name: 🎮 Publish to Itch.io
        run: |
          # Upload App
          ${{ github.workspace }}/tools/butler/butler push ${{ github.workspace }}/artifacts/osx-darwin-fat catgirlland/catgirl-engine:osx-darwin-fat