# Sample workflow for building and deploying a Jekyll site to GitHub Pages
name: Deploy Github Pages Site

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    if: (!endsWith(github.event.head_commit.message, '--norun'))
    runs-on: ubuntu-latest
    environment: WebAssembly
    env:
      HOST: https://engine.catgirl.land/pkg
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Install Rust Nightly Toolchains
      - name: Set Rust To The Nightly Toolchains
        run: $HOME/.cargo/bin/rustup default nightly

      # Setup Rust Build Caching
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "wasm32-pages-rust"

      # Add Build Targets
      - name: Add x86_64 GNU Build Target
        run: $HOME/.cargo/bin/rustup target add wasm32-unknown-unknown

      # Install Wasm-Bindgen-CLI
      - name: Install Wasm-Bindgen-CLI
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          $HOME/.cargo/bin/cargo install -j `nproc --all` wasm-bindgen-cli

      # Install Wasm-Opt
      - name: Install Wasm-Opt
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          $HOME/.cargo/bin/cargo install -j `nproc --all` wasm-opt

      # Install Wasm2Map
      - name: Install Wasm2Map
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          $HOME/.cargo/bin/cargo install -j `nproc --all` cargo-wasm2map

      # Setup Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      # Make Site Directories
      - name: Make Site Directories
        run: |
          mkdir -p ${{ github.workspace }}/docs
          mkdir -p ${{ github.workspace }}/_site

      # Compile Program
      - name: Build Program (Release)
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          $HOME/.cargo/bin/cargo build --target wasm32-unknown-unknown --verbose --release --bin catgirl-engine --timings

      # Generate Bindings
      - name: Generate Bindings
        run: |
          # When building for debug, add --keep-debug to wasm-bindgen to keep the DWARF debug info for the source map generator (may cause wasm-opt to segfault)
          # --debug adds extra checks in the javascript portion for debugging the wasm
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          $HOME/.cargo/bin/wasm-bindgen ${{ github.workspace }}/target/wasm32-unknown-unknown/release/catgirl-engine.wasm --out-dir ${{ github.workspace }}/docs/pkg --typescript --target web

      # Optimize Program
      - name: Optimize Program
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          $HOME/.cargo/bin/wasm-opt ${{ github.workspace }}/docs/pkg/catgirl-engine_bg.wasm -o ${{ github.workspace }}/docs/pkg/catgirl-engine_bg.opt.wasm -Oz
          mv ${{ github.workspace }}/docs/pkg/catgirl-engine_bg.opt.wasm ${{ github.workspace }}/docs/pkg/catgirl-engine_bg.wasm

      # Build Source Maps
      # - name: Build Source Maps
      #   run: |
      #     export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
      #     $HOME/.cargo/bin/cargo wasm2map ${{ github.workspace }}/docs/pkg/catgirl-engine_bg.wasm --patch --base-url $HOST

      # Build Docs
      - name: Build Docs
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all`"
          $HOME/.cargo/bin/cargo doc -j `nproc --all` --target=wasm32-unknown-unknown --release --lib --workspace

      # Copy Assets
      - name: Copy Assets
        run: cp -af ${{ github.workspace }}/client/assets ${{ github.workspace }}/docs

      # Copy Docs
      - name: Copy Docs
        run: cp -af ${{ github.workspace }}/target/wasm32-unknown-unknown/doc ${{ github.workspace }}/docs/docs

      # Copy Manifest
      - name: Copy Manifest
        run: cp -af ${{ github.workspace }}/examples/wasm/web/manifest.json ${{ github.workspace }}/docs

      # Generate Service Worker
      - name: Generate Service Worker
        run: |
          /usr/bin/sed "s/%CACHE_VERSION%/`/usr/bin/git rev-parse HEAD`/" ${{ github.workspace }}/examples/wasm/web/service-worker.js.template > ${{ github.workspace }}/docs/service-worker.js

      # Build with Jekyll
      - name: Build with Jekyll
        uses: actions/jekyll-build-pages@v1
        with:
          source: ./docs
          destination: ./_site

      # Upload artifact
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3

      # List Environment
      - name: List Environment
        run: env
      - name: List All Installed Packages
        run: |
          apt list --installed | wc -l
          apt list --installed
      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      # Deploy to Github Pages
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
