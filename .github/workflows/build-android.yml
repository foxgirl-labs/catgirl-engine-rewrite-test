name: Build For Android
run-name: ${{ github.actor }} is building for Android
on: [push]
jobs:
  Build-Android:
    runs-on: ubuntu-latest
    env:
      DESIRED_API: android-21
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # List Files
      # - name: Switch To Running Directory
      #   run: cd ${{ github.workspace }}
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # Install Dependencies
      - name: Update APT Package Manager
        run: sudo apt update
      # - name: Installing Base Packages Via APT
      #   run: sudo apt install wget sudo coreutils
      - name: Install APT Packages
        run: sudo apt install git gcc libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev unzip openjdk-17-jre-headless

      - name: Create Build Directory
        run: mkdir -p build

      # Install Rust
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ./build/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ./build/rust.sh
      - name: Install Rust
        run: ./build/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      - name: Create Tools Directory
        run: mkdir -p tools

      # Download Android NDK
      - name: Download Android NDK
        run: wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O ./tools/ndk.zip

      # Unzip Android NDK
      - name: Unzip Android NDK
        run: unzip ./tools/ndk.zip -d ./tools/

      # Download Android SDK
      - name: Download Android SDK
        run: wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O ./tools/cmdlt.zip

      # Unzip Android SDK
      - name: Unzip Android SDK
        run: unzip ./tools/cmdlt.zip -d ./tools/

      # Download Desired Android API
      - name: Download Desired Android API
        run: ./tools/cmdline-tools/bin/sdkmanager --licenses --install "platforms;$DESIRED_API" --sdk_root=./tools

      # Add Build Targets
      - name: Add armv7 Android Build Target
        run: rustup target add armv7-linux-androideabi
      - name: Add aarch64 Android Build Target
        run: rustup target add aarch64-linux-android
      - name: Add i686 Android Build Target
        run: rustup target add i686-linux-android
      - name: Add x86_64 Android Build Target
        run: rustup target add x86_64-linux-android

      # ----------------------------------------
      # TODO: Get Rid Of This and Have Gradle Output Dependencies Instead
      - name: Build SDL
        run: ./tools/android-ndk-r25c/ndk-build NDK_PROJECT_PATH="./android/app/jni/SDL" APP_BUILD_SCRIPT="./android/app/jni/SDL/Android.mk" APP_PLATFORM="$DESIRED_API"
      - name: Build SDL_image
        run: ./tools/android-ndk-r25c/ndk-build NDK_PROJECT_PATH="./android/app/jni/SDL_image" APP_BUILD_SCRIPT="./android/app/jni/SDL_image/Android.mk" APP_PLATFORM="$DESIRED_API"
      # - name: Build freetype
      #   run: ./tools/android-ndk-r25c/ndk-build NDK_PROJECT_PATH="./android/app/jni/freetype" APP_BUILD_SCRIPT="./android/app/jni/freetype/Android.mk" APP_PLATFORM="$DESIRED_API"
      # - name: Build harfbuzz
      #   run: ./tools/android-ndk-r25c/ndk-build NDK_PROJECT_PATH="./android/app/jni/harfbuzz" APP_BUILD_SCRIPT="./android/app/jni/harfbuzz/Android.mk" APP_PLATFORM="$DESIRED_API"
      # - name: Build SDL_ttf
      #   run: ./tools/android-ndk-r25c/ndk-build NDK_PROJECT_PATH="./android/app/jni/SDL_ttf" APP_BUILD_SCRIPT="./android/app/jni/SDL_ttf/Android.mk" APP_PLATFORM="$DESIRED_API"

      # Make Directories For Dropping SDL Library Into
      - name: Make Deps Directory For aarch64
        run: mkdir -p ./target/aarch64-linux-android/release/deps
      - name: Make Deps Directory For armv7
        run: mkdir -p ./target/armv7-linux-androideabi/release/deps
      - name: Make Deps Directory For i686
        run: mkdir -p ./target/i686-linux-android/release/deps
      - name: Make Deps Directory For x86_64
        run: mkdir -p ./target/x86_64-linux-android/release/deps

      # Copy SDL Library Over To Corresponding Directories
      - name: Copy SDL Over To Deps Directory For aarch64
        run: cp -a ./android/app/jni/SDL/libs/arm64-v8a/libSDL2.so ./target/aarch64-linux-android/release/deps/libSDL2.so
      - name: Copy SDL Over To Deps Directory For armv7
        run: cp -a ./android/app/jni/SDL/libs/armeabi-v7a/libSDL2.so ./target/armv7-linux-androideabi/release/deps/libSDL2.so
      - name: Copy SDL Over To Deps Directory For i686
        run: cp -a ./android/app/jni/SDL/libs/x86/libSDL2.so ./target/i686-linux-android/release/deps/libSDL2.so
      - name: Copy SDL Over To Deps Directory For x86_64
        run: cp -a ./android/app/jni/SDL/libs/x86_64/libSDL2.so ./target/x86_64-linux-android/release/deps/libSDL2.so

      # Copy SDL_image Library Over To Corresponding Directories
      - name: Copy SDL_image Over To Deps Directory For aarch64
        run: cp -a ./android/app/jni/SDL_image/libs/arm64-v8a/libSDL2_image.so ./target/aarch64-linux-android/release/deps/libSDL2_image.so
      - name: Copy SDL Over To Deps Directory For armv7
        run: cp -a ./android/app/jni/SDL_image/libs/armeabi-v7a/libSDL2_image.so ./target/armv7-linux-androideabi/release/deps/libSDL2_image.so
      - name: Copy SDL Over To Deps Directory For i686
        run: cp -a ./android/app/jni/SDL_image/libs/x86/libSDL2_image.so ./target/i686-linux-android/release/deps/libSDL2_image.so
      - name: Copy SDL Over To Deps Directory For x86_64
        run: cp -a ./android/app/jni/SDL_image/libs/x86_64/libSDL2_image.so ./target/x86_64-linux-android/release/deps/libSDL2_image.so
      # ----------------------------------------

      # Build Engine As Library
      - name: Build CatgirlEngine For aarch64
        run: cargo build --target aarch64-linux-android --release
      - name: Build CatgirlEngine For armv7
        run: cargo build --target armv7-linux-android --release
      - name: Build CatgirlEngine For i686
        run: cargo build --target i686-linux-android --release
      - name: Build CatgirlEngine For x86_64
        run: cargo build --target x86_64-linux-android --release

      # Create Directories For Storing Engine in App
      - name: Create Directory To Store CatgirlEngine In App For aarch64
        run: mkdir -p ./android/app/src/main/jniLibs/arm64-v8a
      - name: Create Directory To Store CatgirlEngine In App For armv7
        run: mkdir -p ./android/app/src/main/jniLibs/armeabi-v7a
      - name: Create Directory To Store CatgirlEngine In App For i686
        run: mkdir -p ./android/app/src/main/jniLibs/x86
      - name: Create Directory To Store CatgirlEngine In App For x86_64
        run: mkdir -p ./android/app/src/main/jniLibs/x86_64

      # Copy Engine To App
      - name: Store CatgirlEngine In App For aarch64
        run: cp ./target/aarch64-linux-android/release/libmain.so ./android/app/src/main/jniLibs/arm64-v8a/libmain.so
      - name: Store CatgirlEngine In App For armv7
        run: cp ./target/armv7-linux-androideabi/release/libmain.so ./android/app/src/main/jniLibs/armeabi-v7a/libmain.so
      - name: Store CatgirlEngine In App For i686
        run: cp ./target/i686-linux-android/release/libmain.so ./android/app/src/main/jniLibs/x86/libmain.so
      - name: Store CatgirlEngine In App For x86_64
        run: cp ./target/x86_64-linux-android/release/libmain.so ./android/app/src/main/jniLibs/x86_64/libmain.so

      # Copy Assets To Android Src
      # - name: Create Assets Directory
      #   run: mkdir -p ./android/app/src/main/assets
      # - name: Copy ResourcePack To Assets Directory
      #   run: cp -R assets ./android/app/src/main/assets/resourcepack

      # Compile Program
      - name: Build Android App (Debug)
        run: cd android && ./gradlew assembleDebug

      # Display APK Directory
      - name: Display APK Directory (Debug)
        run: ls -liallh ./android/app/build/outputs/apk/debug

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."