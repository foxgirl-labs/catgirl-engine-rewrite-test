name: Build For Linux GNU aarch64 (Deb)
run-name: ${{ github.actor }} is building for Linux GNU aarch64 (Deb)
on: [push]
jobs:
  Build:
    runs-on: ubuntu-20.04
    environment: Linux
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Clear Any Accidentally Cached Build Data (Runs Before Desired Cache)
      # - name: Clear Accidental Cache Build Data
      #   continue-on-error: true
      #   run: ${{ github.workspace }}/helper/clean.sh

      # Install Dependencies
      - name: Install APT Packages
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 60
          retry_on: error
          command: |
            sudo apt update
            sudo apt -y install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu ninja-build  # libsdl2-image-dev libsdl2-ttf-dev libsdl2-dev

      # Cache CMake Libs
      - name: Cache CMake SDL
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build-aarch64-linux-gnu-libs
        with:
          path: ${{ github.workspace }}/android/app/jni/build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/*/src') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Build Libs
      - name: Initialize CMake
        run: cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/.toolchains/TC-gnu-gcc-aarch64.cmake -S ${{ github.workspace }}/android/app/jni -B ${{ github.workspace }}/android/app/jni/build -DCMAKE_BUILD_RPATH=/lib/aarch64-linux-gnu
      - name: Make Libs
        run: ninja -C ${{ github.workspace }}/android/app/jni/build
      - name: Reset RunPath For SDL_*
        run: patchelf --set-rpath /lib/aarch64-linux-gnu:/lib/aarch64-linux-gnu/catgirl-engine ${{ github.workspace }}/android/app/jni/build/SDL_*/*.so*

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Toml Files Don't Take Variables, So We Have To Hardcode The File
      - name: Setup Config.toml
        run: sed "s:\$WORKSPACE:${{ github.workspace }}:g" ${{ github.workspace }}/.cargo/config.toml.sample > ${{ github.workspace }}/.cargo/config.toml

      # Install Rust Nightly Toolchains
      - name: Set Rust To The Nightly Toolchains
        run: $HOME/.cargo/bin/rustup default nightly

      # Add Build Targets
      - name: Add aarch64 GNU Pi Build Target
        run: $HOME/.cargo/bin/rustup target add aarch64-unknown-linux-gnu

      - name: Copy SDL Libs To Export Directory
        run: |
          mkdir -p ${{ github.workspace }}/target/libs
          cp -av ${{ github.workspace }}/android/app/jni/build/*/*.so* ${{ github.workspace }}/target/libs
          ln -sf libSDL2-2.0.so ${{ github.workspace }}/target/libs/libSDL2.so
          ls -liallh ${{ github.workspace }}/target/libs

      # Install Deb Packager
      - name: Install Deb Packager
        run: $HOME/.cargo/bin/cargo install -j 4 cargo-deb

      # Compile Program
      - name: Build Program (Deb)
        run: $HOME/.cargo/bin/cargo deb --target=aarch64-unknown-linux-gnu --variant=raspberrypios

      # Test Program
      # - name: Test Program
      #   run: $HOME/.cargo/bin/cargo test -j 4 --verbose --target=aarch64-unknown-linux-gnu --bins --tests --benches --examples

      # Display Export Directory
      - name: Display Export Directory
        run: ls -liallh ${{ github.workspace }}/target/aarch64-unknown-linux-gnu/debian

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Linux-aarch64-GNU-RaspberryPiOS-Deb
          path: ${{ github.workspace }}/target/aarch64-unknown-linux-gnu/debian/*.deb

      # List Environment
      - name: List Environment
        run: env
      - name: List All Installed Packages
        run: |
          apt list --installed | wc -l
          apt list --installed
      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: 🍏 This job's status is ${{ job.status }}.
        run: echo "🍏 This job's status is ${{ job.status }}."
  Publish:
    if: ${{ success() && endsWith(github.event.head_commit.message, '--publish') }}
    needs: [Build]
    runs-on: ubuntu-latest
    environment: Linux
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Download Engine
      - name: Download Engine (Release)
        uses: actions/download-artifact@v3
        with:
          name: CatgirlEngine-Linux-aarch64-GNU-RaspberryPiOS-Deb

      # Create Tag and Publish to Github Releases
      # - name: 👩‍💻 Publish to Github Releases
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       const version = exec.exec("cat Cargo.toml | grep '^version' | head -n1 | cut -d'\"' -f2");
      #       const result = github.rest.repos.createRelease({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         target_commitish: context.sha,
      #         tag_name: "v" + version,
      #         name: "Catgirl Engine v" + version,
      #         body: "Autogenerated Release From Github Actions...",
      #         draft: false,
      #         prerelease: true,
      #         generate_release_notes: true
      #       });

      # Install Butler (For Uploading to Itch.io)
      - name: Install Butler (Upload to Itch.io)
        run: |
          # https://itch.io/docs/butler/pushing.html#channel-names
          # Setup For Installation
          echo "$ITCH_IO_API_KEY" > $HOME/.config/itch/butler_creds
          mkdir -p ${{ github.workspace }}/tools/butler

          # Install Butler
          wget https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default -O ${{ github.workspace }}/butler-linux-amd64.zip
          unzip ${{ github.workspace }}/butler-linux-amd64.zip -d ${{ github.workspace }}/tools/butler

      # Publish to Itch.io
      - name: 🎮 Publish to Itch.io
        run: |
          # Upload App
          butler push ${{ github.workspace }}/CatgirlEngine-Linux-aarch64-GNU-RaspberryPiOS-Deb.zip catgirlland/catgirl-engine:linux-gnu-aarch64