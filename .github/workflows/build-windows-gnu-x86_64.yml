name: Build For Windows GNU x86_64
run-name: ${{ github.actor }} is building for Windows GNU x86_64
on: [push]
jobs:
  Build-Windows-GNU-x86_64:
    runs-on: ubuntu-latest
    environment: Windows
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # Install Dependencies
      - name: Install APT Packages
        uses: nick-fields/retry@v2
        with:
          max_attempts: 3
          timeout_minutes: 60
          retry_on: error
          command: |
            sudo apt update
            sudo apt -y install gcc-mingw-w64-x86-64-posix g++-mingw-w64-x86-64-posix wine64 ninja-build # mingw-w64

      # Clear Any Accidentally Cached Build Data (Runs Before Desired Cache)
      # - name: Clear Accidental Cache Build Data
      #   continue-on-error: true
      #   run: ${{ github.workspace }}/helper/clean.sh

      # Cache CMake Libs
      - name: Cache CMake SDL
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build-x86_64-windows-gnu-libs
        with:
          path: ${{ github.workspace }}/android/app/jni/build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/*/src') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache Rust Target
      - name: Cache Rust Target
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-target-x86_64-windows-gnu-catgirl-engine
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/src') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Build Libs
      - name: Initialize CMake
        run: cmake -G Ninja -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/.toolchains/TC-mingw-gcc-x86_64.cmake -S ${{ github.workspace }}/android/app/jni -B ${{ github.workspace }}/android/app/jni/build
      - name: Make Libs
        run: ninja -C ${{ github.workspace }}/android/app/jni/build

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Toml Files Don't Take Variables, So We Have To Hardcode The File
      - name: Setup Config.toml
        run: sed "s:\$WORKSPACE:${{ github.workspace }}:g" ${{ github.workspace }}/.cargo/config.toml.sample > ${{ github.workspace }}/.cargo/config.toml

      - name: Add x86_64 GNU Windows Build Target
        run: $HOME/.cargo/bin/rustup target add x86_64-pc-windows-gnu

      - name: Copy SDL Libs To Export Directory
        run: |
          mkdir -p ${{ github.workspace }}/target/libs
          cp -av ${{ github.workspace }}/android/app/jni/build/*/*.dll ${{ github.workspace }}/target/libs
          ls -liallh ${{ github.workspace }}/target/libs

      # Compile Program
      - name: Build Program
        run: $HOME/.cargo/bin/cargo build -j 4 --verbose --target=x86_64-pc-windows-gnu --release --bin catgirl-engine

      # Test Program
      # - name: Test Program
      #   run: $HOME/.cargo/bin/cargo test -j 4 --verbose --target=x86_64-pc-windows-gnu --bins --tests --benches --examples

      # Display Export Directory
      - name: Display Export Directory
        run: ls -liallh ${{ github.workspace }}/target/x86_64-pc-windows-gnu/release

      # Prepare Artifact Uploads
      - name: Prepare Artifact Uploads
        run: |
          mkdir -p ${{ github.workspace }}/upload
          mv ${{ github.workspace }}/target/x86_64-pc-windows-gnu/release/*.exe ${{ github.workspace }}/upload
          mv ${{ github.workspace }}/target/libs/* ${{ github.workspace }}/upload
          mv ${{ github.workspace }}/target/binding ${{ github.workspace }}/upload
          mv ${{ github.workspace }}/assets ${{ github.workspace }}/upload

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Windows-x86_64-GNU-Zip
          path: ${{ github.workspace }}/upload/*

      # TODO: Upload to Itch.io (and Github Releases) On Reading "Publish" in Commit Message

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."