name: Build For Linux (Deb)
run-name: ${{ github.actor }} is building for Linux (Deb)
on: [push]
jobs:
  Build-Linux-Debian:
    runs-on: ubuntu-latest
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # List Files
      - name: List files in the repository
        run: ls ${{ github.workspace }}

      # List Environment
      - name: List Environment
        run: env

      # Install Dependencies
      - name: Update APT Package Manager
        run: sudo apt update
      - name: Install APT Packages
        run: sudo apt -y install gcc g++ binutils unzip libc6-dev-amd64-cross
      - name: Install Build Packages
        run: sudo apt -y install cmake

      - name: Create Build Directory
        run: mkdir -p build

      - name: Download and Install Musl Cross Compiler
        run: |
          wget https://github.com/alexisart/musl-cross-make/releases/download/v1.2.3/x86-64-linux-musl-cross-zip.zip -O ${{ github.workspace }}/build/x86-64-linux-musl-cross-zip.zip
          unzip ${{ github.workspace }}/build/x86-64-linux-musl-cross-zip.zip -d ${{ github.workspace }}/build/x86-64-linux-musl-cross
          chmod +x -R ${{ github.workspace }}/build/x86-64-linux-musl-cross  # Github Packaging Loses Executable Bit

      - name: List Files In /usr/x86_64-linux-gnu
        run: find /usr/x86_64-linux-gnu

      # Build SDL2
      - name: Deleting Old CMake Cache
        run: rm -rf ${{ github.workspace }}/android/app/jni/SDL/CMakeCache.txt ${{ github.workspace }}/android/app/jni/SDL/CMakeFiles ${{ github.workspace }}/android/app/jni/SDL/build
      - name: Creating Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL/build
      - name: Initialize CMake
        run: cmake -DSDL_WAYLAND=OFF -DSDL_PULSEAUDIO=OFF -DSDL_IBUS=OFF -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/.toolchains/TC-musl-gcc.cmake -S ${{ github.workspace }}/android/app/jni/SDL/ -B ${{ github.workspace }}/android/app/jni/SDL/build
      - name: Make SDL2
        run: cmake --build ${{ github.workspace }}/android/app/jni/SDL/build

      # Build SDL_image
      - name: Deleting Old CMake Cache
        run: rm -rf ${{ github.workspace }}/android/app/jni/SDL_image/CMakeCache.txt ${{ github.workspace }}/android/app/jni/SDL_image/CMakeFiles ${{ github.workspace }}/android/app/jni/SDL_image/build
      - name: Creating Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_image/build
      - name: Initialize CMake
        run: cmake -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/.toolchains/TC-musl-gcc.cmake -S ${{ github.workspace }}/android/app/jni/SDL_image/ -B ${{ github.workspace }}/android/app/jni/SDL_image/build -DSDL2_INCLUDE_DIR=${{ github.workspace }}/android/app/jni/SDL/include -DSDL2_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2-2.0.so
      - name: Make SDL_image
        run: cmake --build ${{ github.workspace }}/android/app/jni/SDL_image/build

      # Build SDL_ttf
      - name: Deleting Old CMake Cache
        run: rm -rf ${{ github.workspace }}/android/app/jni/SDL_ttf/CMakeCache.txt ${{ github.workspace }}/android/app/jni/SDL_ttf/CMakeFiles  ${{ github.workspace }}/android/app/jni/SDL_ttf/build
      - name: Creating Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_ttf/build
      - name: Initialize CMake
        run: cmake -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/.toolchains/TC-musl-gcc.cmake -S ${{ github.workspace }}/android/app/jni/SDL_ttf/ -B ${{ github.workspace }}/android/app/jni/SDL_image/build -DSDL2_INCLUDE_DIR=${{ github.workspace }}/android/app/jni/SDL/include -DSDL2_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2-2.0.so
      - name: Make SDL_ttf
        run: cmake --build ${{ github.workspace }}/android/app/jni/SDL_ttf/build

      # Install Rust
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/build/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/build/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/build/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Toml Files Don't Take Variables, So We Have To Hardcode The File
      - name: Setup Config.toml
        run: sed "s/\$WORKSPACE/${{ github.workspace }}/g" ${{ github.workspace }}/.cargo/config.toml.sample > ${{ github.workspace }}/.cargo/config.toml

      - name: Add x86_64 Musl Build Target
        run: $HOME/.cargo/bin/rustup target add x86_64-unknown-linux-musl

      # Install Deb Packager
      - name: Install Deb Packager
        run: $HOME/.cargo/bin/cargo install cargo-deb

      # Compile Program
      - name: Build Program (Deb)
        run: |
          export RUSTFLAGS="-L ${{ github.workspace }}/android/app/jni/SDL/build/ -L ${{ github.workspace }}/android/app/jni/SDL_image/build/ -L ${{ github.workspace }}/android/app/jni/SDL_ttf/build/ -C link-arg=-Wl,-rpath,.,-rpath-link,/x86_64-linux-musl/lib"
          RUST_BACKTRACE=full $HOME/.cargo/bin/cargo deb --target=x86_64-unknown-linux-musl  # -- --features bundled

      - name: Test Program
        run: |
          export RUSTFLAGS="-L ${{ github.workspace }}/android/app/jni/SDL/build/ -L ${{ github.workspace }}/android/app/jni/SDL_image/build/ -L ${{ github.workspace }}/android/app/jni/SDL_ttf/build/ -C link-arg=-Wl,-rpath,.,-rpath-link,/x86_64-linux-musl/lib"
          RUST_BACKTRACE=full $HOME/.cargo/bin/cargo test --verbose --target=x86_64-unknown-linux-musl --bins --tests --benches --examples

      # Display Export Directory
      - name: Display Export Directory
        run: ls -liallh ${{ github.workspace }}/target/debian

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Linux-x86_64-Deb
          path: ${{ github.workspace }}/target/debian/*.deb

      # TODO: Upload to Itch.io (and Github Releases) On Reading "Publish" in Commit Message

      - name: List All Files
        run: find ${{ github.workspace }}
      - name: List All Installed Packages
        run: |
          apt list --installed | wc -l
          apt list --installed

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."