name: Build For Linux (Deb)
run-name: ${{ github.actor }} is building for Linux (Deb)
on: [push]
jobs:
  Build-Linux-Debian:
    runs-on: ubuntu-20.04
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # List Files
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # Install Dependencies
      - name: Update APT Package Manager
        run: sudo apt update
      # - name: Installing Base Packages Via APT
      #   run: sudo apt install sudo coreutils apt git
      - name: Install APT Packages
        run: sudo apt install gcc

      - name: Create Build Directory
        run: mkdir -p ${{ github.workspace }}/build

      # Install Rust
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/build/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/build/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/build/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Build SDL2
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL/build
      - name: Deleting Old CMake Cache
        run: rm -rf ${{ github.workspace }}/android/app/jni/SDL/CMakeCache.txt ${{ github.workspace }}/android/app/jni/SDL/CMakeFiles/
      - name: Initialize CMake
        run: cmake -S ${{ github.workspace }}/android/app/jni/SDL/ -B ${{ github.workspace }}/android/app/jni/SDL/build -DCMAKE_BUILD_RPATH=/usr/lib/catgirl-engine
      - name: Make SDL2
        run: cmake --build ${{ github.workspace }}/android/app/jni/SDL/build

      # Build SDL_image
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_image/build
      - name: Deleting Old CMake Cache
        run: rm -rf ${{ github.workspace }}/android/app/jni/SDL_image/CMakeCache.txt ${{ github.workspace }}/android/app/jni/SDL_image/CMakeFiles/
      - name: Initialize CMake
        run: cmake -S ${{ github.workspace }}/android/app/jni/SDL_image/ -B ${{ github.workspace }}/android/app/jni/SDL_image/build -DSDL2_INCLUDE_DIR=${{ github.workspace }}/android/app/jni/SDL/include -DSDL2_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2-2.0.so -DSDL2_MAIN_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2main.a -DCMAKE_BUILD_RPATH=/usr/lib/catgirl-engine
      - name: Make SDL_image
        run: cmake --build ${{ github.workspace }}/android/app/jni/SDL_image/build

      # Build SDL_ttf
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_ttf/build
      - name: Deleting Old CMake Cache
        run: rm -rf ${{ github.workspace }}/android/app/jni/SDL_ttf/CMakeCache.txt ${{ github.workspace }}/android/app/jni/SDL_ttf/CMakeFiles/
      - name: Initialize CMake
        run: cmake -S ${{ github.workspace }}/android/app/jni/SDL_ttf/ -B ${{ github.workspace }}/android/app/jni/SDL_ttf/build -DSDL2_INCLUDE_DIR=${{ github.workspace }}/android/app/jni/SDL/include -DSDL2_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2-2.0.so -DSDL2_MAIN_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2main.a -DCMAKE_BUILD_RPATH=/usr/lib/catgirl-engine
      - name: Make SDL_ttf
        run: cmake --build ${{ github.workspace }}/android/app/jni/SDL_ttf/build

      # Install Deb Packager
      - name: Install Deb Packager
        run: cargo install cargo-deb

      # Compile Program
      - name: Build Program (Release)
        run: RUSTFLAGS="-L ${{ github.workspace }}/android/app/jni/SDL/build/ -L ${{ github.workspace }}/android/app/jni/SDL_image/build/ -L ${{ github.workspace }}/android/app/jni/SDL_ttf/build/ -C link-arg=-Wl,-rpath,/usr/lib/catgirl-engine" cargo deb

      # Display Export Directory
      - name: Display Export Directory
        run: ls -liallh ${{ github.workspace }}/target/debian

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Linux-x86_64-Deb
          path: |
            ${{ github.workspace }}/target/debian/*.deb

      # TODO: Upload to Itch.io (and Github Releases) On Reading "Publish" in Commit Message

      - name: List All Files
        run: find ${{ github.workspace }}
      - name: List All Installed Packages
        run: |
          apt list --installed | wc -l
          apt list --installed

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."