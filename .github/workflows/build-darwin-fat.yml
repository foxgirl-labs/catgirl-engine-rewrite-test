name: Build For Darwin Fat (DMG)
run-name: ${{ github.actor }} is building for Darwin Fat (DMG)
on: [push]
jobs:
  Build-Darwin-Fat:
    runs-on: macos-latest
    environment: Darwin
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Clear Any Accidentally Cached Build Data (Runs Before Desired Cache)
      # - name: Clear Accidental Cache Build Data
      #   continue-on-error: true
      #   run: ${{ github.workspace }}/helper/clean.sh

      # Cache XCodeBuild SDL
      - name: Cache XCodeBuild SDL
        uses: actions/cache@v3
        env:
          cache-name: cache-xcodebuild-build-fat-darwin-macos-sdl
        with:
          path: ${{ github.workspace }}/build/xcode/sdl
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/SDL/src') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache XCodeBuild SDL_image
      - name: Cache XCodeBuild SDL_image
        uses: actions/cache@v3
        env:
          cache-name: cache-xcodebuild-build-fat-darwin-macos-sdl-image
        with:
          path: ${{ github.workspace }}/build/xcode/sdl-image
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/SDL_image/*.*') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache XCodeBuild SDL_ttf
      - name: Cache XCodeBuild SDL_ttf
        uses: actions/cache@v3
        env:
          cache-name: cache-xcodebuild-build-fat-darwin-macos-sdl-ttf
        with:
          path: ${{ github.workspace }}/build/xcode/sdl-ttf
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/SDL_ttf/*.*') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache XCodeBuild SDL_mixer
      - name: Cache XCodeBuild SDL_mixer
        uses: actions/cache@v3
        env:
          cache-name: cache-xcodebuild-build-fat-darwin-macos-sdl-mixer
        with:
          path: ${{ github.workspace }}/build/xcode/sdl-mixer
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/SDL_mixer/*.*') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache Rust Target
      - name: Cache Rust Target
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-target-fat-darwin-macos-catgirl-engine
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/src') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Make Libs Folder
      - name: Make Libs Folder
        run: mkdir -p ${{ github.workspace }}/target/libs

      # Build SDL2
      - name: Make and Install SDL
        working-directory: ${{ github.workspace }}/android/app/jni/SDL/Xcode/SDL
        run: xcodebuild -parallelizeTargets CFLAGS="-mmacosx-version-min=11.0" OTHER_CFLAGS="-fembed-bitcode" ONLY_ACTIVE_ARCH=NO -arch arm64 -arch x86_64 -project SDL.xcodeproj -sdk macosx -configuration Release -scheme Framework install CONFIGURATION_BUILD_DIR=${{ github.workspace }}/build/xcode/sdl/build CONFIGURATION_TEMP_DIR=${{ github.workspace }}/build/xcode/sdl/temp

      # Build SDL_image
      - name: Make and Install SDL_image
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_image/Xcode
        run: xcodebuild -parallelizeTargets CFLAGS="-mmacosx-version-min=11.0" OTHER_CFLAGS="-I${{ github.workspace }}/android/app/jni/SDL/include -fembed-bitcode" ONLY_ACTIVE_ARCH=NO -arch arm64 -arch x86_64 -project SDL_image.xcodeproj -sdk macosx -configuration Release -scheme Framework install CONFIGURATION_BUILD_DIR=${{ github.workspace }}/build/xcode/sdl-image/build CONFIGURATION_TEMP_DIR=${{ github.workspace }}/build/xcode/sdl-image/temp

      # Build SDL_ttf
      - name: Make and Install SDL_ttf
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_ttf/Xcode
        run: xcodebuild -parallelizeTargets CFLAGS="-mmacosx-version-min=11.0" OTHER_CFLAGS="-I${{ github.workspace }}/android/app/jni/SDL/include -fembed-bitcode" ONLY_ACTIVE_ARCH=NO -arch arm64 -arch x86_64 -project SDL_ttf.xcodeproj -sdk macosx -configuration Release -scheme Framework install CONFIGURATION_BUILD_DIR=${{ github.workspace }}/build/xcode/sdl-ttf/build CONFIGURATION_TEMP_DIR=${{ github.workspace }}/build/xcode/sdl-ttf/temp

      # Build SDL_mixer
      - name: Make and Install SDL_mixer
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_mixer/Xcode
        run: xcodebuild -parallelizeTargets CFLAGS="-mmacosx-version-min=11.0" OTHER_CFLAGS="-I${{ github.workspace }}/android/app/jni/SDL/include -fembed-bitcode" ONLY_ACTIVE_ARCH=NO -arch arm64 -arch x86_64 -project SDL_mixer.xcodeproj -sdk macosx -configuration Release -scheme Framework install CONFIGURATION_BUILD_DIR=${{ github.workspace }}/build/xcode/sdl-mixer/build CONFIGURATION_TEMP_DIR=${{ github.workspace }}/build/xcode/sdl-mixer/temp

      # List and Organize Libs In Export Directory
      - name: Organize Libs In Export Directory
        run: |
          cp -av ${{ github.workspace }}/build/xcode/sdl/build/* ${{ github.workspace }}/target/libs
          cp -av ${{ github.workspace }}/build/xcode/sdl-image/build/* ${{ github.workspace }}/target/Libs
          cp -av ${{ github.workspace }}/build/xcode/sdl-ttf/build/* ${{ github.workspace }}/target/libs
          cp -av ${{ github.workspace }}/build/xcode/sdl-mixer/build/* ${{ github.workspace }}/target/libs
          ls -liallhL ${{ github.workspace }}/target/libs

      # Upload Frameworks
      # - name: Upload SDL Frameworks (Release)
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: SDL-Frameworks-Darwin-Fat-Zip
      #     path: ${{ github.workspace }}/target/libs/*

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Toml Files Don't Take Variables, So We Have To Hardcode The File
      - name: Setup Config.toml
        run: sed "s:\$WORKSPACE:${{ github.workspace }}:g" ${{ github.workspace }}/.cargo/config.toml.sample > ${{ github.workspace }}/.cargo/config.toml

      # Install Rust Nightly Toolchains 
      - name: Set Rust To The Nightly Toolchains
        run: $HOME/.cargo/bin/rustup default nightly

      # Add Build Targets (No PowerPC or i686 For Now)
      - name: Add x86_64 Darwin Build Target
        run: $HOME/.cargo/bin/rustup target add x86_64-apple-darwin
      - name: Add aarch64 Darwin Build Target
        run: $HOME/.cargo/bin/rustup target add aarch64-apple-darwin

      # Symlink SDK to WORKSPACE/build/sdk
      - name: Symlink SDK to $WORKSPACE/build/sdk
        run: |
          mkdir -p ${{ github.workspace }}/build
          ln -sf $(xcrun --sdk macosx --show-sdk-path) ${{ github.workspace }}/build/sdk

      # Copy Libs
      - name: Copy SDL2 Libs and Dependencies To /usr/local/lib
        run: |
          cp ${{ github.workspace }}/target/libs/SDL2.framework/SDL2 /usr/local/lib/libSDL2.dylib
          cp ${{ github.workspace }}/target/libs/SDL2_image.framework/SDL2_image /usr/local/lib/libSDL2_image.dylib
          cp ${{ github.workspace }}/target/libs/SDL2_ttf.framework/SDL2_ttf /usr/local/lib/libSDL2_ttf.dylib
          cp ${{ github.workspace }}/target/libs/SDL2_mixer.framework/SDL2_mixer /usr/local/lib/libSDL2_mixer.dylib
          ls -liallhL /usr/local/lib/libSDL*

      # Copy Frameworks
      - name: Copy SDL2 Frameworks and Dependencies To /Library/Frameworks
        run: |
          sudo cp -LR ${{ github.workspace }}/target/libs/*.framework /Library/Frameworks
          ls -liallhL /Library/Frameworks/SDL2*

      # Compile Program
      - name: Build Program (x86_64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo build -j 6 --release --target=x86_64-apple-darwin --bin catgirl-engine
      - name: Build Program (aarch64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo build -j 6 --release --target=aarch64-apple-darwin --bin catgirl-engine

      # Test Program
      - name: Test Program (x86_64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo test -j 6 --verbose --target=x86_64-apple-darwin --bins --tests --benches --examples
      # - name: Test Program (aarch64)
      #   run: $HOME/.cargo/bin/cargo test -j 6 --verbose --target=aarch64-apple-darwin --bins --tests --benches --examples

      # Combine Binaries Into Fat Binary
      - name: Combine Binaries Into Fat Binary
        run: |
          mkdir -p ${{ github.workspace }}/target/fat-apple-darwin/release
          lipo -create ${{ github.workspace }}/target/x86_64-apple-darwin/release/catgirl-engine ${{ github.workspace }}/target/aarch64-apple-darwin/release/catgirl-engine -output ${{ github.workspace }}/target/fat-apple-darwin/release/catgirl-engine

      # Prepare App
      - name: Prepare App
        run: |
          mkdir -p ${{ github.workspace }}/target/osx
          cp -av ${{ github.workspace }}/examples/osx/disk_image ${{ github.workspace }}/target/osx
          ln -s /Applications "${{ github.workspace }}/target/osx/disk_image/ "

      - name: Setup Info.plist
        run: |
          export MACOSX_BUNDLE_EXECUTABLE_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_INFO_STRING=`cat ${{ github.workspace }}/Cargo.toml | grep '^description' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_ICON_FILE=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2`.icns
          export MACOSX_BUNDLE_GUI_IDENTIFIER=`cat ${{ github.workspace }}/android/app/build.gradle | grep "applicationId" | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_BUNDLE_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2 | sed 's/-/ /g' | tr "[A-Z]" "[a-z]" | sed -r 's/\<./\U&/g'`
          export MACOSX_BUNDLE_BUNDLE_VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_COPYRIGHT=`cat ${{ github.workspace }}/Cargo.toml | grep '^license' | head -n1 | cut -d'"' -f2`

          sed "s:\$MACOSX_BUNDLE_EXECUTABLE_NAME:$MACOSX_BUNDLE_EXECUTABLE_NAME:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_INFO_STRING:$MACOSX_BUNDLE_INFO_STRING:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_ICON_FILE:$MACOSX_BUNDLE_ICON_FILE:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_GUI_IDENTIFIER:$MACOSX_BUNDLE_GUI_IDENTIFIER:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_BUNDLE_NAME:$MACOSX_BUNDLE_BUNDLE_NAME:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME:$MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_BUNDLE_VERSION:$MACOSX_BUNDLE_BUNDLE_VERSION:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist
          sed "s:\$MACOSX_BUNDLE_COPYRIGHT:$MACOSX_BUNDLE_COPYRIGHT:g" ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist > ${{ github.workspace }}/target/osx/disk_image/catgirl-engine.app/Contents/Info.plist

      # Create DMG For Downloading
      - name: Create DMG For Downloading
        run: |
          export MACOSX_BUNDLE_EXECUTABLE_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2`
          export MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME=`cat ${{ github.workspace }}/Cargo.toml | grep '^name' | head -n1 | cut -d'"' -f2 | sed 's/-/ /g' | tr "[A-Z]" "[a-z]" | sed -r 's/\<./\U&/g'`
          
          mkdir -p ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/MacOS
          mkdir -p ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks
          cp -LR ${{ github.workspace }}/target/fat-apple-darwin/release/$MACOSX_BUNDLE_EXECUTABLE_NAME ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/MacOS/

          ls -liallh ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks/
          rm -rf ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks/*
          cp -LR ${{ github.workspace }}/target/libs/SDL2.framework ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks/
          cp -LR ${{ github.workspace }}/target/libs/SDL2_image.framework ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks/
          cp -LR ${{ github.workspace }}/target/libs/SDL2_ttf.framework ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks/
          cp -LR ${{ github.workspace }}/target/libs/SDL2_mixer.framework ${{ github.workspace }}/target/osx/disk_image/$MACOSX_BUNDLE_EXECUTABLE_NAME.app/Contents/Frameworks/

          hdiutil create -volname "$MACOSX_BUNDLE_BUNDLE_DISPLAY_NAME" -srcfolder ${{ github.workspace }}/target/osx/disk_image -ov -format UDZO ${{ github.workspace }}/target/osx/$MACOSX_BUNDLE_EXECUTABLE_NAME.dmg

      # Display Export Directory
      - name: Display Export Directory
        run: |
          find ${{ github.workspace }}/target/osx

      # Prepare Artifact Uploads
      - name: Prepare Artifact Uploads
        run: |
          mkdir -p ${{ github.workspace }}/upload
          mv ${{ github.workspace }}/target/osx/*.dmg ${{ github.workspace }}/upload

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Darwin-Fat-DMG
          path: ${{ github.workspace }}/upload/*

      # TODO: Upload to Itch.io (and Github Releases) On Reading "Publish" in Commit Message

      # List Environment
      - name: List Environment
        run: env
      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: 🍏 This job's status is ${{ job.status }}.
        run: echo "🍏 This job's status is ${{ job.status }}."