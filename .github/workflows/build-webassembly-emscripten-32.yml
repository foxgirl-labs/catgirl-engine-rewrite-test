# Wasm is not yet available for 64 bit, see https://github.com/WebAssembly/memory64
name: Build For WebAssembly 32
run-name: ${{ github.actor }} is building for WebAssembly 32
on: [push]
jobs:
  Build-WebAssembly-Emscripten-32:
    runs-on: ubuntu-latest
    environment: Linux
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Install Dependencies
      # - name: Install APT Packages
      #   uses: nick-fields/retry@v2
      #   with:
      #     max_attempts: 3
      #     timeout_minutes: 60
      #     retry_on: error
      #     command: |
      #       sudo apt update
      #       sudo apt -y install emscripten

      # Make Tools Directory
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools

      # Install and Setup Enscripten
      - name: Install and Setup Enscripten
        run: |
          git clone https://github.com/emscripten-core/emsdk ${{ github.workspace }}/tools/emsdk
          ${{ github.workspace }}/tools/emsdk/emsdk install latest
          ${{ github.workspace }}/tools/emsdk/emsdk activate latest
          source ${{ github.workspace }}/tools/emsdk/emsdk_env.sh

      # Cache CMake SDL_SDL
      - name: Cache CMake SDL
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build-webassembly-emscripten-32-sdl
        with:
          path: ${{ github.workspace }}/android/app/jni/SDL/build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/SDL/src') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache CMake SDL_image
      - name: Cache CMake SDL_image
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build-webassembly-emscripten-32-sdl-image
        with:
          path: ${{ github.workspace }}/android/app/jni/SDL_image/build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/SDL_image/*.*') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache CMake Freetype
      - name: Cache CMake Freetype
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build-webassembly-emscripten-32-freetype
        with:
          path: ${{ github.workspace }}/android/app/jni/SDL_ttf/external/freetype/build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/SDL_ttf/external/freetype/src') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache CMake SDL_ttf
      - name: Cache CMake SDL_ttf
        uses: actions/cache@v3
        env:
          cache-name: cache-cmake-build-webassembly-emscripten-32-sdl-ttf
        with:
          path: ${{ github.workspace }}/android/app/jni/SDL_ttf/build
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/android/app/jni/SDL_ttf/*.*') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache Rust Target
      - name: Cache Rust Target
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-target-webassembly-emscripten-32-catgirl-engine
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/src') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Build SDL2
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL/build
      - name: Initialize CMake
        working-directory: ${{ github.workspace }}/android/app/jni/SDL/build
        run: emcmake cmake ${{ github.workspace }}/android/app/jni/SDL -DBUILD_SHARED_LIBS=off
      - name: Make SDL2
        working-directory: ${{ github.workspace }}/android/app/jni/SDL/build
        run: emcmake make -j 4

      # Build SDL_image
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_image/build
      - name: Initialize CMake
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_image/build
        run: emcmake cmake ${{ github.workspace }}/android/app/jni/SDL_image -DBUILD_SHARED_LIBS=off -DSDL2_MAIN_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2main.a
      - name: Make SDL_image
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_image/build
        run: emcmake make -j 4

      # Build Freetype
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_ttf/external/freetype/build
      - name: Initialize CMake
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_ttf/external/freetype/build
        run: emcmake cmake ${{ github.workspace }}/android/app/jni/SDL_ttf/external/freetype
      - name: Make Freetype
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_ttf/external/freetype/build
        run: emcmake make -j 4

      # Build SDL_ttf
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_ttf/build
      - name: Initialize CMake
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_ttf/build
        run: emcmake cmake ${{ github.workspace }}/android/app/jni/SDL_ttf -DBUILD_SHARED_LIBS=off -DSDL2_MAIN_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2main.a -DFREETYPE_LIBRARY=${{ github.workspace }}/android/app/jni/SDL_ttf/external/freetype/build/libfreetype.a -DFREETYPE_INCLUDE_DIRS=${{ github.workspace }}/android/app/jni/SDL_ttf/external/freetype/include
      - name: Make SDL_ttf
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_ttf/build
        run: emcmake make -j 4

      # Build Ogg
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_mixer/external/ogg/build
      - name: Initialize CMake
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_mixer/external/ogg/build
        run: emcmake cmake ${{ github.workspace }}/android/app/jni/SDL_mixer/external/ogg
      - name: Make Ogg
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_mixer/external/ogg/build
        run: emcmake make -j 4

      # Build Opusfile
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_mixer/external/opusfile/build
      - name: Initialize CMake
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_mixer/external/opusfile/build
        run: emcmake cmake ${{ github.workspace }}/android/app/jni/SDL_mixer/external/opusfile
      - name: Make Opusfile
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_mixer/external/opusfile/build
        run: emcmake make -j 4

      # Build SDL_mixer
      - name: Make Build Directory
        run: mkdir -p ${{ github.workspace }}/android/app/jni/SDL_mixer/build
      - name: Initialize CMake
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_mixer/build
        run: emcmake cmake ${{ github.workspace }}/android/app/jni/SDL_mixer -DBUILD_SHARED_LIBS=off -DSDL2_MAIN_LIBRARY=${{ github.workspace }}/android/app/jni/SDL/build/libSDL2main.a
      - name: Make SDL_mixer
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_mixer/build
        run: emcmake make -j 4

      # Install Rust
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Toml Files Don't Take Variables, So We Have To Hardcode The File
      - name: Setup Config.toml
        run: sed "s:\$WORKSPACE:${{ github.workspace }}:g" ${{ github.workspace }}/.cargo/config.toml.sample > ${{ github.workspace }}/.cargo/config.toml

      - name: Add aarch32 GNU Pi Build Target
        run: $HOME/.cargo/bin/rustup target add wasm32-unknown-unknown

      - name: Copy SDL Libs To Export Directory
        run: |
          mkdir -p ${{ github.workspace }}/target/libs
          cp -av ${{ github.workspace }}/android/app/jni/SDL/build/*.so* ${{ github.workspace }}/target/libs
          # cp -av ${{ github.workspace }}/android/app/jni/SDL/build/libSDLmain.a ${{ github.workspace }}/target/libs
          cp -av ${{ github.workspace }}/android/app/jni/SDL_image/build/*.so* ${{ github.workspace }}/target/libs
          cp -av ${{ github.workspace }}/android/app/jni/SDL_ttf/build/*.so* ${{ github.workspace }}/target/libs
          ln -sf libSDL2-2.0.so ${{ github.workspace }}/target/libs/libSDL2.so
          ls -liallh ${{ github.workspace }}/target/libs

      # Install Deb Packager
      - name: Install Deb Packager
        run: $HOME/.cargo/bin/cargo install -j 4 cargo-deb

      # Compile Program
      - name: Build Program (Deb)
        run: $HOME/.cargo/bin/cargo deb --target=wasm32-unknown-unknown --variant=raspberrypios

      # Test Program
      # - name: Test Program
      #   run: $HOME/.cargo/bin/cargo test -j 4 --verbose --target=wasm32-unknown-unknown --bins --tests --benches --examples

      # Display Export Directory
      - name: Display Export Directory
        run: ls -liallh ${{ github.workspace }}/target/wasm32-unknown-unknown/debian

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Linux-aarch32-GNU-RaspberryPiOS-Deb
          path: ${{ github.workspace }}/target/wasm32-unknown-unknown/debian/*.deb

      # TODO: Upload to Itch.io (and Github Releases) On Reading "Publish" in Commit Message

      # Display Build Status
      - name: 🍏 This job's status is ${{ job.status }}.
        run: echo "🍏 This job's status is ${{ job.status }}."