// apply plugin: 'org.mozilla.rust-android-gradle.rust-android'


def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary

// ----------------------------------------
// Read Version Info From Cargo.toml
// ----------------------------------------
// https://docs.oracle.com/javase/8/docs/api/java/io/File.html
File cargoTomlLocation = new File(buildscript.sourceFile.parentFile.parentFile.parentFile, "Cargo.toml")
ArrayList<String> cargoTomlContents = cargoTomlLocation.readLines()
String cargoVersionLine = cargoTomlContents.find({ line -> line.toLowerCase().startsWith("version") })
String cargoVersion = cargoVersionLine.split('"', 3)[1]
String[] cargoVersionSplit = cargoVersion.split('\\.', 3)
int cargoVersionCode = Integer.parseInt(cargoVersionSplit[0]) * 1000 +
                        Integer.parseInt(cargoVersionSplit[1]) * 100 +
                        Integer.parseInt(cargoVersionSplit[2]) * 10
println "Building Catgirl Engine v" + cargoVersion + " (" + cargoVersionCode + ")"
// ----------------------------------------

if (buildAsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    // the `compileSdkVersion` is what the NDK is passed
    compileSdkVersion 33
    defaultConfig {
        if (buildAsApplication) {
            applicationId "land.catgirl.engine"
        }
        minSdkVersion 21
        targetSdkVersion 33
        versionName cargoVersion
        versionCode cargoVersionCode
        externalNativeBuild {
            cmake {
                abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86', 'x86_64'
            }
        }
    }
    signingConfigs {
        release {
            storeFile file(System.env.ANDROID_RELEASE_KEY_PATH)
            storePassword System.env.ANDROID_RELEASE_STORE_PASSWORD
            keyAlias "key0"
            keyPassword System.env.ANDROID_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            signingConfig signingConfigs.release
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    namespace 'land.catgirl.engine'
    lint {
        abortOnError false
    }
    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"]
            .dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }
    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }
        
        externalNativeBuild {
            cmake {
                path 'jni/CMakeLists.txt'
            }
        }
       
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "land.catgirl.engine.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
}