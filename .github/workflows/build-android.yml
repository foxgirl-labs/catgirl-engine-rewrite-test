name: Build For Android
on:
  push:
  workflow_dispatch:
    inputs:
      publish:
        description: 'Run publish job'
        required: true
        default: 'no'
        type: choice
        options:
        - 'no'
        - 'yes'
jobs:
  build:
    runs-on: ubuntu-latest
    environment: Android
    env:
      ANDROID_RELEASE_STORE_PASSWORD: ${{ secrets.ANDROID_RELEASE_STORE_PASSWORD }}
      ANDROID_RELEASE_KEY_PASSWORD: ${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
      ANDROID_RELEASE_KEY_PATH: ${{ vars.ANDROID_RELEASE_KEY_PATH }}
      ANDROID_HOME: /usr/local/lib/android/sdk
      CARGO_TERM_COLOR: always
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Setup Gradle Build Action (For Caching Builds) - ./app/.cxx|./app/build|./.gradle
      - name: Setup Gradle Build Action (For Caching Builds)
        uses: gradle/actions/setup-gradle@v3

      # Install Dependencies
      - name: Install and Cache APT Packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: unzip
          version: 1.0
          execute_install_scripts: true

      # https://github.com/marketplace/actions/android-emulator-runner
      # Install Screenshot Dependencies
      - name: Install and Cache Screenshot APT Packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: imagemagick pipewire libgl1-mesa-dri xvfb libxkbcommon-x11-dev
          version: 1.0
          execute_install_scripts: true

      # Extract Keystore
      - name: Extract Keystore
        run: echo "${{ secrets.RELEASE_KEY }}" | base64 -d > ${{ vars.ANDROID_RELEASE_KEY_PATH }}

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Install Rust Nightly Toolchains
      - name: Set Rust To The Nightly Toolchains
        run: $HOME/.cargo/bin/rustup default nightly

      # Setup Rust Build Caching
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "android-rust"

      # Add Build Targets
      - name: Add armv7 Android Build Target
        run: $HOME/.cargo/bin/rustup target add armv7-linux-androideabi
      - name: Add aarch64 Android Build Target
        run: $HOME/.cargo/bin/rustup target add aarch64-linux-android
      - name: Add i686 Android Build Target
        run: $HOME/.cargo/bin/rustup target add i686-linux-android
      - name: Add x86_64 Android Build Target
        run: $HOME/.cargo/bin/rustup target add x86_64-linux-android

      # Install Git Pre-Commit Hooks to Enforce Hooks
      - name: Install Git Pre-Commit Hooks to Enforce Hooks
        run: pip install pre-commit

      # Check Pre-Commit Version
      - name: Check Pre-Commit Version
        run: pre-commit --version

      # Install Pre-Commit Hooks
      - name: Install Pre-Commit Hooks
        run: pre-commit install

      # Autoupdate Pre-Commit Hooks
      - name: Autoupdate Pre-Commit Hooks
        run: pre-commit autoupdate

      # Check Files with Pre-Commit Hooks
      - name: Check Files with Pre-Commit Hooks
        run: pre-commit run --all-files

      # Install Cargo-NDK
      - name: Install Cargo-NDK
        run: cargo install cargo-ndk

      # Workaround Cargo Gradle Plugin Bug
      - name: Workaround Cargo Gradle Plugin Bug
        run: touch ${{ github.workspace }}/android/local.properties

      # Extract/Import GPG Signing Key
      - name: Extract GPG Signing Key
        run: |
          echo "${{ secrets.GPG_SIGNING_KEY }}" > $HOME/signing.gpg
          gpg --import $HOME/signing.gpg

      # Build Engine As APK
      - name: Build CatgirlEngine APK
        working-directory: ${{ github.workspace }}/android
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          ${{ github.workspace }}/android/gradlew assembleRelease

      # We no longer use the Play Store, but if another store uses AAB, we can enable it
      # # Build Engine As AAB
      # - name: Build CatgirlEngine AAB
      #   working-directory: ${{ github.workspace }}/android
      #   run: |
      #     export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
      #     ${{ github.workspace }}/android/gradlew bundleRelease

      # Display APK Directory
      - name: Display APK Directory (Release)
        run: ls -liallh ${{ github.workspace }}/android/app/build/outputs/apk/release

      # # Display Bundle Directory
      # - name: Display Bundle Directory (Release)
      #   run: ls -liallh ${{ github.workspace }}/android/app/build/outputs/bundle/release

      # Prepare Artifact Uploads
      - name: Prepare Artifact Uploads
        run: |
          mkdir -p ${{ github.workspace }}/upload/profdata
          cp -a ${{ github.workspace }}/android/app/build/outputs/apk/release/app-release.apk ${{ github.workspace }}/upload/catgirl-engine.apk
          #cp -a ${{ github.workspace }}/android/app/build/outputs/bundle/release/app-release.aab ${{ github.workspace }}/upload
          cp -a ${{ github.workspace }}/target/binding ${{ github.workspace }}/upload
          cp -a ${{ github.workspace }}/target/cargo-timings ${{ github.workspace }}/upload
          cp -a ${{ github.workspace }}/*.mm_profdata ${{ github.workspace }}/upload/profdata

      # Sign Files
      - name: Sign Files
        run: |
          cd ${{ github.workspace }}/upload
          find . -type f -not -name "checksums.sha512" -exec shasum -a 512 {} \; > checksums.sha512
          gpg --sign checksums.sha512

      # Upload Android
      - name: Upload Android (Release)
        uses: actions/upload-artifact@v4
        with:
          name: CatgirlEngine-Android
          path: ${{ github.workspace }}/upload/*

      # Install Code Size Profiler
      - name: Install Code Size Profiler
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all`"
          $HOME/.cargo/bin/cargo install -j `nproc --all` twiggy

      # Profile Code Size
      - name: Profile Code Size (aarch64)
        run: $HOME/.cargo/bin/twiggy top -n 20 "${{ github.workspace }}/target/aarch64-linux-android/release/libmain.so"

      # Profile Code Size
      - name: Profile Code Size (armv7)
        run: $HOME/.cargo/bin/twiggy top -n 20 "${{ github.workspace }}/target/armv7-linux-androideabi/release/libmain.so"

      # Profile Code Size
      - name: Profile Code Size (i686)
        run: $HOME/.cargo/bin/twiggy top -n 20 "${{ github.workspace }}/target/i686-linux-android/release/libmain.so"

      # Profile Code Size
      - name: Profile Code Size (x86_64)
        run: $HOME/.cargo/bin/twiggy top -n 20 "${{ github.workspace }}/target/x86_64-linux-android/release/libmain.so"

      # Install Miri
      # - name: Install Miri
      #   run: |
      #     rustup toolchain install nightly --component miri
      #     rustup override set nightly
      #     $HOME/.cargo/bin/cargo miri setup --target=armv7-linux-androideabi
      #     $HOME/.cargo/bin/cargo miri setup --target=aarch64-linux-android
      #     $HOME/.cargo/bin/cargo miri setup --target=i686-linux-android
      #     $HOME/.cargo/bin/cargo miri setup --target=x86_64-linux-android

      # Run Miri Tests (armv7-linux-androideabi)
      # - name: Run Miri Tests (armv7-linux-androideabi)
      #   run: |
      #     # https://github.com/rust-lang/miri?tab=readme-ov-file#running-tests-in-parallel
      #     export RUSTFLAGS="-Z threads=`nproc --all`"
      #     $HOME/.cargo/bin/cargo miri test --workspace -j `nproc --all` --target=armv7-linux-androideabi --bins --tests --benches --examples
      #     # $HOME/.cargo/bin/cargo miri nextest run -j`nproc --all`

      # Run Miri Tests (aarch64-linux-android)
      # - name: Run Miri Tests (aarch64-linux-android)
      #   run: |
      #     # https://github.com/rust-lang/miri?tab=readme-ov-file#running-tests-in-parallel
      #     export RUSTFLAGS="-Z threads=`nproc --all`"
      #     $HOME/.cargo/bin/cargo miri test --workspace -j `nproc --all` --target=aarch64-linux-android --bins --tests --benches --examples
      #     # $HOME/.cargo/bin/cargo miri nextest run -j`nproc --all`

      # Run Miri Tests (i686-linux-android)
      # - name: Run Miri Tests (i686-linux-android)
      #   run: |
      #     # https://github.com/rust-lang/miri?tab=readme-ov-file#running-tests-in-parallel
      #     export RUSTFLAGS="-Z threads=`nproc --all`"
      #     $HOME/.cargo/bin/cargo miri test --workspace -j `nproc --all` --target=i686-linux-android --bins --tests --benches --examples
      #     # $HOME/.cargo/bin/cargo miri nextest run -j`nproc --all`

      # Run Miri Tests (x86_64-linux-android)
      # - name: Run Miri Tests (x86_64-linux-android)
      #   run: |
      #     # https://github.com/rust-lang/miri?tab=readme-ov-file#running-tests-in-parallel
      #     export RUSTFLAGS="-Z threads=`nproc --all`"
      #     $HOME/.cargo/bin/cargo miri test --workspace -j `nproc --all` --target=x86_64-linux-android --bins --tests --benches --examples
      #     # $HOME/.cargo/bin/cargo miri nextest run -j`nproc --all`

      # List Environment
      - name: List Environment
        run: env
      - name: List All Installed Packages
        run: |
          apt list --installed | wc -l
          apt list --installed
      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: 🍏 This job's status is ${{ job.status }}.
        run: echo "🍏 This job's status is ${{ job.status }}."
  run:
    if: ${{ success() }}
    needs: [Build]
    runs-on: ubuntu-latest
    environment: Android
    env:
      DISPLAY: :99
    steps:
      # Install Dependencies
      # - name: Install and Cache APT Packages
      #   uses: awalsh128/cache-apt-pkgs-action@latest
      #   with:
      #     packages: pipewire libgl1-mesa-dri xvfb icewm flameshot libxkbcommon-x11-dev
      #     version: 1.0
      #     execute_install_scripts: true

      # Download APK
      - name: Download APK (Release)
        uses: actions/download-artifact@v4
        with:
          name: CatgirlEngine-Android
          path: ${{ github.workspace }}/artifacts/android

      # Enable KVM
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Setup Gradle Build Action (For Caching Builds) - ./app/.cxx|./app/build|./.gradle
      - name: Setup Gradle Build Action (For Caching Builds)
        uses: gradle/actions/setup-gradle@v3

      # Run Game Engine
      # https://github.com/marketplace/actions/android-emulator-runner
      # TODO: Setup Run Script
      # - name: Run Game Engine
      #   uses: reactivecircus/android-emulator-runner@v2
      #   with:
      #     api-level: 34
      #     script: ${{ github.workspace }}/android/gradlew installRelease

      # Screenshot Game Engine
      # - name: Screenshot Game Engine
      #   run: |
      #     mkdir -p ${{ github.workspace }}/upload
      #     #import -window "$(xdotool getactivewindow)" ${{ github.workspace }}/upload/screenshot.png  # X11
      #     flameshot screen -p ${{ github.workspace }}/upload/screenshot.png  # Wayland

      # Upload Screenshots
      # - name: Upload Screenshots
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: CatgirlEngine-Linux-x86_64-GNU-AppImage-Screenshots-Zip
      #     path: ${{ github.workspace }}/upload/*

      # Kill Window Manager and X Server
      # - name: Kill Window Manager and X Server
      #   run: |
      #     killall Xvfb
      #     killall icewm

      # List Environment
      - name: List Environment
        run: env
      - name: List All Installed Packages
        run: |
          apt list --installed | wc -l
          apt list --installed
      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: 🍏 This job's status is ${{ job.status }}.
        run: echo "🍏 This job's status is ${{ job.status }}."
  deploy:
    if: ${{ success() && (endsWith(github.event.head_commit.message, '--publish') || inputs.publish == 'yes') }}
    needs: [Run]
    runs-on: ubuntu-latest
    environment: Android
    env:
      BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
      GH_TOKEN: ${{ github.token }}
    permissions:
      # See https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
      # See https://docs.github.com/en/rest/overview/permissions-required-for-fine-grained-personal-access-tokens
      contents: write
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Install Dependencies
      # - name: Install and Cache APT Packages
      #   uses: awalsh128/cache-apt-pkgs-action@latest
      #   with:
      #     packages: ruby-bundler  # jq coreutils gitsome
      #     version: 1.0
      #     execute_install_scripts: true

      # Download APK
      - name: Download APK (Release)
        uses: actions/download-artifact@v4
        with:
          name: CatgirlEngine-Android
          path: ${{ github.workspace }}/artifacts/android

      # Recreate APK Zip
      - name: Recreate APK Zip (Release)
        run: cd ${{ github.workspace }}/artifacts/android; zip -9 -y -r ../CatgirlEngine-Android.zip .

      # Create Tag and Github Release
      - name: 👩‍💻 Create Tag and Github Release
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export VERSION_STRING="Catgirl Engine v$VERSION"
          export BODY="Autogenerated Release From Github Actions..."

          export DRAFT="false"
          export PRERELEASE="false"
          export LATEST="true"
          export GENERATE_RELEASE_NOTES="true"

          export BRANCH=`git branch --show-current --format="%s" | tr -d '\n'`
          # export COMMIT=`git log -1 --oneline | cut -d' ' -f1 | tr -d '\n'`

          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases \
            -f tag_name="v$VERSION" \
            -f target_commitish="$BRANCH" \
            -f name="$VERSION_STRING" \
            -f body="$BODY" \
            -f make_latest="$LATEST" \
            -F draft="$DRAFT" \
            -F prerelease="$PRERELEASE" \
            -F generate_release_notes="$GENERATE_RELEASE_NOTES" || echo "Already Exists"

      # Publish to Github Release
      - name: 👩‍💻 Publish to Github Release
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export ARTIFACT_PATH="${{ github.workspace }}/artifacts/CatgirlEngine-Android.zip"
          export DISPLAY_LABEL="Android"

          gh release upload v$VERSION "$ARTIFACT_PATH"#"$DISPLAY_LABEL" -R lexi-the-cute/catgirl-engine

      # Install Butler (For Uploading to Itch.io)
      - name: Install Butler (Upload to Itch.io)
        run: |
          # https://itch.io/docs/butler/pushing.html#channel-names
          # Setup For Installation
          mkdir -p ${{ github.workspace }}/tools/butler

          # Install Butler
          wget https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default -O ${{ github.workspace }}/butler-linux-amd64.zip
          unzip ${{ github.workspace }}/butler-linux-amd64.zip -d ${{ github.workspace }}/tools/butler

      # Publish to Itch.io
      - name: 🎮 Publish to Itch.io
        run: |
          # Upload App
          ${{ github.workspace }}/tools/butler/butler push ${{ github.workspace }}/artifacts/android/catgirl-engine.apk fomxgorl/catgirl-engine:android
