name: Build For Darwin Fat (DMG)
run-name: ${{ github.actor }} is building for Darwin Fat (DMG)
on: [push]
jobs:
  Build-Darwin-Fat:
    runs-on: macos-latest
    environment: Darwin
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # Cache Built Libs
      - name: Cache Built Libs
        uses: actions/cache@v3
        env:
          cache-name: cache-built-darwin-macos-libs
        with:
          path: ${{ github.workspace }}/build/libs
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/target/libs') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache XCodeBuild SDL
      - name: Cache XCodeBuild SDL
        uses: actions/cache@v3
        env:
          cache-name: cache-xcodebuild-build-fat-darwin-macos-sdl
        with:
          path: ${{ github.workspace }}/build/xcode/sdl
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache XCodeBuild SDL_image
      - name: Cache XCodeBuild SDL_image
        uses: actions/cache@v3
        env:
          cache-name: cache-xcodebuild-build-fat-darwin-macos-sdl-image
        with:
          path: ${{ github.workspace }}/build/xcode/sdl-image
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache XCodeBuild SDL_ttf
      - name: Cache XCodeBuild SDL_ttf
        uses: actions/cache@v3
        env:
          cache-name: cache-xcodebuild-build-fat-darwin-macos-sdl-ttf
        with:
          path: ${{ github.workspace }}/build/xcode/sdl-ttf
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # Cache Rust Target
      - name: Cache Rust Target
        uses: actions/cache@v3
        env:
          cache-name: cache-rust-target-fat-darwin-macos-catgirl-engine
        with:
          path: ${{ github.workspace }}/target
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('${{ github.workspace }}/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-build-${{ env.cache-name }}-

      # List Environment
      - name: List Environment
        run: env

      # Make Libs Folder
      - name: Make Libs Folder
        run: mkdir -p ${{ github.workspace }}/target/libs

      # Build SDL2
      - name: Make and Install SDL
        working-directory: ${{ github.workspace }}/android/app/jni/SDL/Xcode/SDL
        run: xcodebuild -parallelizeTargets OTHER_CFLAGS="-fembed-bitcode" ONLY_ACTIVE_ARCH=NO -arch arm64 -arch x86_64 -project SDL.xcodeproj -sdk macosx -configuration Release -scheme "Shared Library" install BUILD_DIR=${{ github.workspace }}/target/libs CONFIGURATION_BUILD_DIR=${{ github.workspace }}/build/xcode/sdl/build CONFIGURATION_TEMP_DIR=${{ github.workspace }}/build/xcode/sdl/temp

      # Build SDL_image
      - name: Make and Install SDL_image
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_image/Xcode
        run: xcodebuild -parallelizeTargets OTHER_CFLAGS="-I${{ github.workspace }}/android/app/jni/SDL/include -fembed-bitcode" ONLY_ACTIVE_ARCH=NO -arch arm64 -arch x86_64 -project SDL_image.xcodeproj -sdk macosx -configuration Release -scheme "Static Library" install BUILD_DIR=${{ github.workspace }}/target/libs CONFIGURATION_BUILD_DIR=${{ github.workspace }}/build/xcode/sdl-image/build CONFIGURATION_TEMP_DIR=${{ github.workspace }}/build/xcode/sdl-image/build

      # Build SDL_ttf
      - name: Make and Install SDL_ttf
        working-directory: ${{ github.workspace }}/android/app/jni/SDL_ttf/Xcode
        run: xcodebuild -parallelizeTargets OTHER_CFLAGS="-I${{ github.workspace }}/android/app/jni/SDL/include -fembed-bitcode" ONLY_ACTIVE_ARCH=NO -arch arm64 -arch x86_64 -project SDL_ttf.xcodeproj -sdk macosx -configuration Release -scheme "Static Library" install BUILD_DIR=${{ github.workspace }}/target/libs CONFIGURATION_BUILD_DIR=${{ github.workspace }}/build/xcode/sdl-ttf/build CONFIGURATION_TEMP_DIR=${{ github.workspace }}/build/xcode/sdl-ttf/temp

      # List XCode Build Folder
      - name: List XCode Build Folder
        run: find ${{ github.workspace }}/build/xcode

      # List and Organize Libs In Export Directory
      - name: List and Organize Libs In Export Directory
        run: |
          ls -liallh ${{ github.workspace }}/target/libs
          mv ${{ github.workspace }}/target/libs/Release/* ${{ github.workspace }}/target/libs
          rm -r ${{ github.workspace }}/target/libs/Release
          ls -liallh ${{ github.workspace }}/target/libs

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Toml Files Don't Take Variables, So We Have To Hardcode The File
      - name: Setup Config.toml
        run: sed "s:\$WORKSPACE:${{ github.workspace }}:g" ${{ github.workspace }}/.cargo/config.toml.sample > ${{ github.workspace }}/.cargo/config.toml

      # Add Build Targets (No PowerPC or i686 For Now)
      - name: Add x86_64 Darwin Build Target
        run: $HOME/.cargo/bin/rustup target add x86_64-apple-darwin
      - name: Add aarch64 Darwin Build Target
        run: $HOME/.cargo/bin/rustup target add aarch64-apple-darwin

      # Symlink SDK to WORKSPACE/build/sdk
      - name: Symlink SDK to $WORKSPACE/build/sdk
        run: |
          mkdir -p ${{ github.workspace }}/build
          ln -sf $(xcrun --sdk macosx --show-sdk-path) ${{ github.workspace }}/build/sdk

      # Compile Program
      - name: Build Program (x86_64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo build -j 6 --release --target=x86_64-apple-darwin --bin catgirl-engine
      - name: Build Program (aarch64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo build -j 6 --release --target=aarch64-apple-darwin --bin catgirl-engine

      # Copy Libs
      - name: Copy SDL2 To /usr/local/lib For Tests
        run: cp ${{ github.workspace }}/target/libs/libSDL2.dylib /usr/local/lib

      # Test Program
      - name: Test Program (x86_64)
        run: |
          export LIBRARY_PATH="$LIBRARY_PATH:${{ github.workspace }}/build/sdk/usr/lib"
          $HOME/.cargo/bin/cargo test -j 6 --verbose --target=x86_64-apple-darwin --bins --tests --benches --examples
      # - name: Test Program (aarch64)
      #   run: $HOME/.cargo/bin/cargo test -j 6 --verbose --target=aarch64-apple-darwin --bins --tests --benches --examples

      # Combine Binaries Into Fat Binary
      - name: Combine Binaries Into Fat Binary
        run: |
          mkdir -p ${{ github.workspace }}/target/fat-apple-darwin/release
          lipo -create ${{ github.workspace }}/target/x86_64-apple-darwin/release/catgirl-engine ${{ github.workspace }}/target/aarch64-apple-darwin/release/catgirl-engine -output ${{ github.workspace }}/target/fat-apple-darwin/release/catgirl-engine

      # Create .app Directory
      - name: Create .app Directory
        run: mkdir -p ${{ github.workspace }}/target/catgirl-engine.app

      # Create DMG For Downloading
      - name: Create DMG For Downloading
        run: hdiutil help

      # Display Export Directory
      - name: Display Export Directory
        run: |
          find ${{ github.workspace }}/target

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Darwin-Fat-DMG
          path: |
            ${{ github.workspace }}/target/fat-apple-darwin/release/catgirl-engine
            ${{ github.workspace }}/target/libs/*
            ${{ github.workspace }}/target/binding

      # TODO: Upload to Itch.io (and Github Releases) On Reading "Publish" in Commit Message

      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."