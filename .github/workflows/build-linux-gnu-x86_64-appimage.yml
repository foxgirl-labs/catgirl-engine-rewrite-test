name: Build For Linux GNU x86_64 as AppImage
on:
  push:
  workflow_dispatch:
    inputs:
      publish:
        description: 'Run publish job'
        required: true
        default: 'no'
        type: choice
        options:
        - 'no'
        - 'yes'
jobs:
  build:
    runs-on: ubuntu-20.04  # Intentionally set so it uses an older GLIBC
    environment: Linux
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # Install Dependencies
      - name: Install APT Packages
        uses: nick-fields/retry@v3
        with:
          max_attempts: 3
          timeout_minutes: 60
          retry_on: error
          command: |
            sudo apt update
            sudo apt -y install gnupg2 gcc g++ libfuse2 desktop-file-utils zsync  # gcc-x86-64-linux-gnu g++-x86-64-linux-gnu

            # Install AppImageTool
            mkdir -p ${{ github.workspace }}/.bin
            wget https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-x86_64.AppImage -O ${{ github.workspace }}/.bin/appimagetool
            chmod +x ${{ github.workspace }}/.bin/appimagetool

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Install Rust Nightly Toolchains
      - name: Set Rust To The Nightly Toolchains
        run: $HOME/.cargo/bin/rustup default nightly

      # Setup Rust Build Caching
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "linux-rust-gnu-x86_64"

      # Add Build Targets
      - name: Add x86_64 GNU Build Target
        run: $HOME/.cargo/bin/rustup target add x86_64-unknown-linux-gnu

      # Install Git Pre-Commit Hooks to Enforce Hooks
      - name: Install Git Pre-Commit Hooks to Enforce Hooks
        run: pip install pre-commit

      # Check Pre-Commit Version
      - name: Check Pre-Commit Version
        run: pre-commit --version

      # Install Pre-Commit Hooks
      - name: Install Pre-Commit Hooks
        run: pre-commit install

      # Autoupdate Pre-Commit Hooks
      - name: Autoupdate Pre-Commit Hooks
        run: pre-commit autoupdate

      # Check Files with Pre-Commit Hooks
      - name: Check Files with Pre-Commit Hooks
        run: pre-commit run --all-files

      # Install Cargo AppImage
      - name: Install Cargo AppImage
        run: cargo install --git https://github.com/lexi-the-cute/cargo-appimage  # cargo-appimage

      # Extract/Import GPG Signing Key
      - name: Extract GPG Signing Key
        run: |
          echo "${{ secrets.GPG_SIGNING_KEY }}" > $HOME/signing.gpg
          gpg --import $HOME/signing.gpg

      # # Build Docs
      # - name: Build Docs
      #   run: |
      #     export RUSTFLAGS="-Z threads=`nproc --all`"
      #     $HOME/.cargo/bin/cargo doc -j `nproc --all` --target=x86_64-unknown-linux-gnu --release --lib --workspace

      # Compile Program
      - name: Build Program
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          export PATH="${{ github.workspace }}/.bin:$PATH"

          # Release is already specified by cargo appimage
          # https://github.com/StratusFearMe21/cargo-appimage/issues/30
          # https://github.com/StratusFearMe21/cargo-appimage/blob/485be0a4393a251b7c3b20487424209bb29f7374/src/main.rs#L18
          $HOME/.cargo/bin/cargo appimage --features appimage -j `nproc --all` --verbose --target=x86_64-unknown-linux-gnu --bin catgirl-engine --timings

      # Display Export Directory
      - name: Display Export Directory
        run: ls -liallh ${{ github.workspace }}/target/x86_64-unknown-linux-gnu/release

      # Display AppImage Directory
      - name: Display AppImage Directory
        run: ls -liallh ${{ github.workspace }}/target/appimage

      # Prepare Artifact Uploads
      - name: Prepare Artifact Uploads
        run: |
          mkdir -p ${{ github.workspace }}/upload
          cp -a ${{ github.workspace }}/target/appimage/catgirl-engine.AppImage ${{ github.workspace }}/upload
          #tar -cvf ${{ github.workspace }}/upload/docs.tar.gz ${{ github.workspace }}/target/x86_64-unknown-linux-gnu/doc/

      # Sign Files
      - name: Sign Files
        run: |
          find ${{ github.workspace }}/upload -type f -not -name "checksums.sha512" -exec shasum -a 512 {} \; > ${{ github.workspace }}/upload/checksums.sha512
          gpg --sign ${{ github.workspace }}/upload/checksums.sha512

      # Upload Engine
      - name: Upload Engine (Release)
        uses: actions/upload-artifact@v4
        with:
          name: CatgirlEngine-Linux-x86_64-GNU-AppImage-Zip
          path: ${{ github.workspace }}/upload/*

      # Test Minimal Dependency Versions
      # https://doc.rust-lang.org/cargo/reference/resolver.html
      # https://doc.rust-lang.org/cargo/reference/unstable.html?highlight=version#direct-minimal-versions
      - name: Test Minimal Dependency Versions
        continue-on-error: true
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all`"
          $HOME/.cargo/bin/cargo build -j `nproc --all` --target=x86_64-unknown-linux-gnu --bin catgirl-engine -Z direct-minimal-versions

      # Install Code Size Profiler
      - name: Install Code Size Profiler
        run: |
          export RUSTFLAGS="-Z threads=`nproc --all` -Z self-profile"  # -Z time-passes
          $HOME/.cargo/bin/cargo install -j `nproc --all` twiggy

      # Profile Code Size
      - name: Profile Code Size
        run: $HOME/.cargo/bin/twiggy top -n 20 "${{ github.workspace }}/target/x86_64-unknown-linux-gnu/release/catgirl-engine"

      # Test Program
      # - name: Test Program
      #   run: |
      #     # export LD_LIBRARY_PATH=${{ github.workspace }}/target/libs:$LD_LIBRARY_PATH
      #     export RUSTFLAGS="-Z threads=`nproc --all`"
      #     $HOME/.cargo/bin/cargo test --workspace -j `nproc --all` --target=x86_64-unknown-linux-gnu --bins --tests --benches --examples

      # Install Nextest
      # - name: Install Nextest
      #   run: |
      #     cargo install nextest

      # Install Miri
      - name: Install Miri
        run: |
          rustup toolchain install nightly --component miri
          rustup override set nightly
          $HOME/.cargo/bin/cargo miri setup --target=x86_64-unknown-linux-gnu

      # Run Miri Tests
      - name: Run Miri Tests
        run: |
          # https://github.com/rust-lang/miri?tab=readme-ov-file#running-tests-in-parallel
          export RUSTFLAGS="-Z threads=`nproc --all`"
          $HOME/.cargo/bin/cargo miri test --workspace -j `nproc --all` --target=x86_64-unknown-linux-gnu --bins --tests --benches --examples
          # $HOME/.cargo/bin/cargo miri nextest run -j`nproc --all`

      # List Environment
      - name: List Environment
        run: env
      - name: List All Installed Packages
        run: |
          apt list --installed | wc -l
          apt list --installed
      - name: List All Files
        run: find ${{ github.workspace }}

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."
  deploy:
    if: ${{ success() && (endsWith(github.event.head_commit.message, '--publish') || inputs.publish == 'yes') }}
    needs: [Build]
    runs-on: ubuntu-latest
    environment: Linux
    env:
      BUTLER_API_KEY: ${{ secrets.ITCH_IO_API_KEY }}
      GH_TOKEN: ${{ github.token }}
    permissions:
      # See https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
      # See https://docs.github.com/en/rest/overview/permissions-required-for-fine-grained-personal-access-tokens
      contents: write
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # Install Dependencies
      # - name: Install APT Packages
      #   uses: nick-fields/retry@v3
      #   with:
      #     max_attempts: 3
      #     timeout_minutes: 60
      #     retry_on: error
      #     command: |
      #       sudo apt update
      #       sudo apt -y install jq  # coreutils gitsome

      # Download Engine
      - name: Download Engine (Release)
        uses: actions/download-artifact@v4
        with:
          name: CatgirlEngine-Linux-x86_64-GNU-AppImage-Zip
          path: ${{ github.workspace }}/artifacts/linux-gnu-x86_64-appimage

      # Create Tag and Github Release
      - name: üë©‚Äçüíª Create Tag and Github Release
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export VERSION_STRING="Catgirl Engine v$VERSION"
          export BODY="Autogenerated Release From Github Actions..."

          export DRAFT="false"
          export PRERELEASE="true"
          export GENERATE_RELEASE_NOTES="true"

          export BRANCH=`git branch --show-current --format="%s" | tr -d '\n'`
          # export COMMIT=`git log -1 --oneline | cut -d' ' -f1 | tr -d '\n'`

          gh api --method POST \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /repos/${{ github.repository }}/releases \
            -f tag_name="v$VERSION" \
            -f target_commitish="$BRANCH" \
            -f name="$VERSION_STRING" \
            -f body="$BODY" \
            -F draft="$DRAFT" \
            -F prerelease="$PRERELEASE" \
            -F generate_release_notes="$GENERATE_RELEASE_NOTES" || echo "Already Exists"

      # Publish to Github Release
      - name: üë©‚Äçüíª Publish to Github Release
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export ARTIFACT_PATH="${{ github.workspace }}/artifacts/linux-gnu-x86_64-appimage/catgirl-engine.AppImage"
          export DISPLAY_LABEL="x86_64 Linux AppImage"

          gh release upload v$VERSION "$ARTIFACT_PATH"#"$DISPLAY_LABEL" -R lexi-the-cute/catgirl-engine

      # Install Butler (For Uploading to Itch.io)
      - name: Install Butler (Upload to Itch.io)
        run: |
          # https://itch.io/docs/butler/pushing.html#channel-names
          # Setup For Installation
          mkdir -p ${{ github.workspace }}/tools/butler

          # Install Butler
          wget https://broth.itch.ovh/butler/linux-amd64/LATEST/archive/default -O ${{ github.workspace }}/butler-linux-amd64.zip
          unzip ${{ github.workspace }}/butler-linux-amd64.zip -d ${{ github.workspace }}/tools/butler

      # Publish to Itch.io
      - name: üéÆ Publish to Itch.io
        run: |
          # Upload App
          ${{ github.workspace }}/tools/butler/butler push ${{ github.workspace }}/artifacts/linux-gnu-x86_64-appimage/catgirl-engine.AppImage fomxgorl/catgirl-engine:linux-gnu-x86_64-appimage
