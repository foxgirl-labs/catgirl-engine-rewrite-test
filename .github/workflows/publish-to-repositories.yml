name: Publish to Repositories
on:
  push:
    branches: ["main"]
  workflow_dispatch:
    inputs:
      publish:
        description: 'Run publish job'
        required: true
        default: 'no'
        type: choice
        options:
        - 'no'
        - 'yes'
      aur:
        description: 'Run AUR publish job'
        required: true
        default: 'no'
        type: choice
        options:
        - 'no'
        - 'yes'
jobs:
  build:
    if: ${{ endsWith(github.event.head_commit.message, '--publish') || inputs.publish == 'yes' }}
    runs-on: ubuntu-latest
    environment: Linux
    env:
      CARGO_TERM_COLOR: always
      WORKSPACE: ${{ github.workspace }}
      RUST_BACKTRACE: full
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
    steps:
      # Setup Build Environment
      - name: 🎉 The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "🎉 The job was automatically triggered by a ${{ github.event_name }} event."
      - name: 🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "🐧 This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: 🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "🔎 The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: 💡 The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "💡 The ${{ github.repository }} repository has been cloned to the runner."

      # Install Dependencies
      - name: Install and Cache APT Packages
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: gcc g++ makepkg  # gcc-x86-64-linux-gnu g++-x86-64-linux-gnu
          version: 1.0
          execute_install_scripts: true

      # Install Rust
      - name: Make Tools Directory
        run: mkdir -p ${{ github.workspace }}/tools
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/tools/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/tools/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/tools/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      # Install Rust Stable Toolchains
      - name: Set Rust To The Stable Toolchains
        run: $HOME/.cargo/bin/rustup default stable

      # Setup Rust Build Caching
      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "crates-io-linux-rust-gnu-x86_64"

      # Add Build Targets
      - name: Add x86_64 GNU Build Target
        run: $HOME/.cargo/bin/rustup target add x86_64-unknown-linux-gnu

      # Install Git Pre-Commit Hooks to Enforce Hooks
      - name: Install Git Pre-Commit Hooks to Enforce Hooks
        run: pip install pre-commit

      # Check Pre-Commit Version
      - name: Check Pre-Commit Version
        run: pre-commit --version

      # Install Pre-Commit Hooks
      - name: Install Pre-Commit Hooks
        run: pre-commit install

      # Check Files with Pre-Commit Hooks
      - name: Check Files with Pre-Commit Hooks
        run: pre-commit run --all-files

      # Copy Desktop and Icon Files (For Crate AUR Install)
      - name: Copy Desktop and Icon Files
        run: |
          mkdir -p ${{ github.workspace }}/install
          cp -a ${{ github.workspace }}/client/assets/resources/catgirl-engine.desktop ${{ github.workspace }}/install
          cp -a ${{ github.workspace }}/client/assets/vanilla/texture/logo/logo.svg ${{ github.workspace }}/install/catgirl-engine.svg
          cp -a ${{ github.workspace }}/client/assets/vanilla/texture/logo/logo-1024x1024-color.png ${{ github.workspace }}/install/catgirl-engine.png

      # Publish to Crates.io
      - name: Publish to catgirl-engine-utils to Crates.io
        run: cargo publish -p catgirl-engine-utils --no-verify

      # Publish to Crates.io
      - name: Publish to catgirl-engine-client to Crates.io
        run: cargo publish -p catgirl-engine-client --no-verify

      # Publish to Crates.io
      - name: Publish to catgirl-engine-server to Crates.io
        run: cargo publish -p catgirl-engine-server --no-verify

      # Publish to Crates.io
      - name: Publish to catgirl-engine to Crates.io
        run: cargo publish -p catgirl-engine --no-verify --allow-dirty
  aur:
    if: ${{ success() || inputs.aur == 'yes' }}
    needs: [Build]
    runs-on: ubuntu-latest
    environment: Linux
    steps:
      # Check out repository code
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Write SSH Private Key
      - name: Write SSH Private Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AUR_SSH }}" > ~/.ssh/aur
          echo -e "Host aur.archlinux.org\n\tHostname aur.archlinux.org\n\tUser git\n\tIdentityFile ~/.ssh/aur\n\tIdentitiesOnly yes" > ~/.ssh/config
          echo "${{ vars.AUR_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 0600 ~/.ssh/aur
          chmod 0600 ~/.ssh/config
          chmod 0600 ~/.ssh/known_hosts

      # Clone AUR Repo
      - name: Clone AUR Repo
        run: git clone ssh://aur@aur.archlinux.org/catgirl-engine.git ${{ github.workspace }}/aur

      # Bump PKGBUILD Version
      - name: Bump PKGBUILD Version
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export PKGREL=1

          # TODO: Consider checking for -alpha and -beta to filter onto other packages
          echo "Version: $VERSION - Release: $PKGREL"

          sed -i "s/pkgver=[0-9.]*/pkgver=$VERSION/" ${{ github.workspace }}/aur/PKGBUILD
          sed -i "s/pkgrel=[0-9]*/pkgrel=$PKGREL/" ${{ github.workspace }}/aur/PKGBUILD

      # Generating SRCINFO (Manually)
      - name: Generating SRCINFO (Manually)
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export PKGREL=1
          export DOWNLOAD_PATH="catgirl-engine-$VERSION.tar.gz::https://static.crates.io/crates/catgirl-engine/catgirl-engine-$VERSION.crate"

          echo "Version: $VERSION - Release: $PKGREL"
          echo "Download Path: $DOWNLOAD_PATH"

          cd ${{ github.workspace }}/aur
          # makepkg --printsrcinfo > ${{ github.workspace }}/aur/.SRCINFO
          sed -i "s/pkgver = [0-9.]*/pkgver = $VERSION/" ${{ github.workspace }}/aur/.SRCINFO
          sed -i "s/pkgrel = [0-9]*/pkgrel = $PKGREL/" ${{ github.workspace }}/aur/.SRCINFO
          sed -i "s|source = .*|source = $DOWNLOAD_PATH|" ${{ github.workspace }}/aur/.SRCINFO

      # Upload Repo As Artifact
      - name: Upload Repo As Artifact
        uses: actions/upload-artifact@v4
        with:
          name: CatgirlEngine-AUR-Repo
          path: ${{ github.workspace }}/aur/*
          include-hidden-files: true

      # Setting Git Author Info
      - name: Setting Git Author Info
        run: |
          echo Setting Git Author Info
          git config --global user.email "${{ vars.GIT_EMAIL }}"
          git config --global user.name "${{ vars.GIT_NAME }}"

      # Publish Update to Arch User Repository (AUR)
      - name: Publish Update to Arch User Repository (AUR)
        run: |
          cd ${{ github.workspace }}/aur
          git add PKGBUILD .SRCINFO
          git commit -m "Updating latest version"
          git push
  announce:
    if: ${{ success() }}
    needs: [AUR]
    runs-on: ubuntu-latest
    environment: Linux
    env:
      DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
    steps:
      # Check out repository code
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          submodules: recursive

      # Publish Announcement to Notification Channel
      - name: Publish Announcement to Notification Channel
        run: |
          export VERSION=`cat ${{ github.workspace }}/Cargo.toml | grep '^version' | head -n1 | cut -d'"' -f2 | tr -d '\n'`
          export VERSION_STRING="Catgirl Engine v$VERSION"
          export MESSAGE="[$VERSION_STRING has been published...](https://github.com/foxgirl-labs/catgirl-engine/releases/tag/v$VERSION)"
          curl -i -H "Accept: application/json" -H "Content-Type:application/json" -X POST --data "{\"content\": \"$MESSAGE\"}" $DISCORD_WEBHOOK_URL
