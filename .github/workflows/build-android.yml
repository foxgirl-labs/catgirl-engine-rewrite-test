name: Build For Android
run-name: ${{ github.actor }} is building for Android
on: [push]
jobs:
  Build-Android:
    runs-on: ubuntu-latest
    environment: Android
    env:
      DESIRED_API: 21
      JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      ANDROID_RELEASE_STORE_PASSWORD: ${{ secrets.ANDROID_RELEASE_STORE_PASSWORD }}
      ANDROID_RELEASE_KEY_PASSWORD: ${{ secrets.ANDROID_RELEASE_KEY_PASSWORD }}
      ANDROID_RELEASE_KEY_PATH: ${{ vars.ANDROID_RELEASE_KEY_PATH }}
    steps:
      # Setup Build Environment
      - name: üéâ The job was automatically triggered by a ${{ github.event_name }} event.
        run: echo "üéâ The job was automatically triggered by a ${{ github.event_name }} event."
      - name: üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!
        run: echo "üêß This job is now running on a ${{ runner.os }} server hosted by GitHub!"
      - name: üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}.
        run: echo "üîé The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: üí° The ${{ github.repository }} repository has been cloned to the runner.
        run: echo "üí° The ${{ github.repository }} repository has been cloned to the runner."

      # List Files
      - name: List files in the repository
        run: |
          ls ${{ github.workspace }}

      # Install Dependencies
      - name: Update APT Package Manager
        run: sudo apt update
      # - name: Installing Base Packages Via APT
      #   run: sudo apt install wget sudo coreutils sed dpkg apt git
      - name: Install APT Packages
        run: sudo apt install gcc unzip openjdk-17-jre-headless
      - name: Install SDL Packages  # "Is `aarch64-linux-android-clang` installed?" if SDL packages not installed
        run: sudo apt install libsdl2-dev libsdl2-image-dev libsdl2-ttf-dev  # libfreetype-dev libharfbuzz-dev

      # Setup Packages
      - name: Setup Java Update Alternatives
        run: sudo update-alternatives --set java $JAVA_HOME/bin/java

      # Extract Keystore
      - name: Extract Keystore
        run: echo "${{ secrets.RELEASE_KEY }}" | base64 -d > ${{ vars.ANDROID_RELEASE_KEY_PATH }}

      - name: Create Build Directory
        run: mkdir -p build

      # Install Rust
      - name: Download Rust Installer
        run: curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > ${{ github.workspace }}/build/rust.sh
      - name: Make Rust Installer Executable
        run: chmod +x ${{ github.workspace }}/build/rust.sh
      - name: Install Rust
        run: ${{ github.workspace }}/build/rust.sh -y
      - name: Load Cargo Environment
        run: source "$HOME/.cargo/env"

      - name: Create Tools Directory
        run: mkdir -p tools

      # Download Android NDK
      - name: Download Android NDK
        run: wget https://dl.google.com/android/repository/android-ndk-r25c-linux.zip -O ${{ github.workspace }}/tools/ndk.zip

      # Unzip Android NDK
      - name: Unzip Android NDK
        run: unzip ${{ github.workspace }}/tools/ndk.zip -d ${{ github.workspace }}/tools/

      # Download Android SDK
      - name: Download Android SDK
        run: wget https://dl.google.com/android/repository/commandlinetools-linux-9477386_latest.zip -O ${{ github.workspace }}/tools/cmdlt.zip

      # Unzip Android SDK
      - name: Unzip Android SDK
        run: unzip ${{ github.workspace }}/tools/cmdlt.zip -d ${{ github.workspace }}/tools/

      # Auto-Accept Android SDK Licenses
      - name: Auto Accept Android SDK Licenses
        run: yes | ${{ github.workspace }}/tools/cmdline-tools/bin/sdkmanager --licenses --sdk_root=${{ github.workspace }}/tools

      # Download Desired Android API
      - name: Download Desired Android API
        run: ${{ github.workspace }}/tools/cmdline-tools/bin/sdkmanager --install "platforms;android-$DESIRED_API" --sdk_root=${{ github.workspace }}/tools

      # Add Build Targets
      - name: Add armv7 Android Build Target
        run: rustup target add armv7-linux-androideabi
      - name: Add aarch64 Android Build Target
        run: rustup target add aarch64-linux-android
      - name: Add i686 Android Build Target
        run: rustup target add i686-linux-android
      - name: Add x86_64 Android Build Target
        run: rustup target add x86_64-linux-android

      # Build Native Libraries
      - name: Build Native Libraries (Release)
        working-directory: android
        run: ${{ github.workspace }}/android/gradlew externalNativeBuildRelease

      # Create config.toml File
      - name: Create config.toml File
        run: sed "s/{android-version}/$DESIRED_API/g" ${{ github.workspace }}/.cargo/config.toml.sample > ${{ github.workspace }}/.cargo/config.toml

      # Build Engine As Library
      - name: Build CatgirlEngine For aarch64
        run: cargo build --target aarch64-linux-android --release
      - name: Build CatgirlEngine For armv7
        run: cargo build --target armv7-linux-androideabi --release
      - name: Build CatgirlEngine For i686
        run: cargo build --target i686-linux-android --release
      - name: Build CatgirlEngine For x86_64
        run: cargo build --target x86_64-linux-android --release

      # Create Directories For Storing Engine in App
      - name: Create Directory To Store CatgirlEngine In App For aarch64
        run: mkdir -p ${{ github.workspace }}/android/app/src/main/jniLibs/arm64-v8a
      - name: Create Directory To Store CatgirlEngine In App For armv7
        run: mkdir -p ${{ github.workspace }}/android/app/src/main/jniLibs/armeabi-v7a
      - name: Create Directory To Store CatgirlEngine In App For i686
        run: mkdir -p ${{ github.workspace }}/android/app/src/main/jniLibs/x86
      - name: Create Directory To Store CatgirlEngine In App For x86_64
        run: mkdir -p ${{ github.workspace }}/android/app/src/main/jniLibs/x86_64

      # Copy Engine To App
      - name: Store CatgirlEngine In App For aarch64
        run: cp ${{ github.workspace }}/target/aarch64-linux-android/release/libmain.so ${{ github.workspace }}/android/app/src/main/jniLibs/arm64-v8a/libmain.so
      - name: Store CatgirlEngine In App For armv7
        run: cp ${{ github.workspace }}/target/armv7-linux-androideabi/release/libmain.so ${{ github.workspace }}/android/app/src/main/jniLibs/armeabi-v7a/libmain.so
      - name: Store CatgirlEngine In App For i686
        run: cp ${{ github.workspace }}/target/i686-linux-android/release/libmain.so ${{ github.workspace }}/android/app/src/main/jniLibs/x86/libmain.so
      - name: Store CatgirlEngine In App For x86_64
        run: cp ${{ github.workspace }}/target/x86_64-linux-android/release/libmain.so ${{ github.workspace }}/android/app/src/main/jniLibs/x86_64/libmain.so

      # Compile Program
      - name: Build Android App as APK (Release)
        working-directory: android
        run: ${{ github.workspace }}/android/gradlew assembleRelease

      - name: Build Android App as Bundle (Release)
        working-directory: android
        run: ${{ github.workspace }}/android/gradlew bundleRelease

      # Display APK Directory
      - name: Display APK Directory (Release)
        run: ls -liallh ${{ github.workspace }}/android/app/build/outputs/apk/release

      # Display Bundle Directory
      - name: Display Bundle Directory (Release)
        run: ls -liallh ${{ github.workspace }}/android/app/build/outputs/bundle/release

      # Upload APK
      - name: Upload APK (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Android-APK
          path: |
            ${{ github.workspace }}/android/app/build/outputs/apk/release/app-release.apk
            ${{ github.workspace }}/android/app/build/outputs/mapping/release/mapping.txt

      # Upload Bundle
      - name: Upload Bundle (Release)
        uses: actions/upload-artifact@v3
        with:
          name: CatgirlEngine-Android-Bundle
          path: |
            ${{ github.workspace }}/android/app/build/outputs/bundle/release/app-release.aab
            ${{ github.workspace }}/android/app/build/outputs/mapping/release/mapping.txt

      # TODO: Upload to Play Store (and Github Releases) On Reading "Publish" in Commit Message

      # Display Build Status
      - name: üçè This job's status is ${{ job.status }}.
        run: echo "üçè This job's status is ${{ job.status }}."